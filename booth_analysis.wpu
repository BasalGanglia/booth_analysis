#!wing
#!version=6.0
##################################################################
# Wing IDE project file : User-specific branch                   #
##################################################################
[user attributes]
debug.breakpoints = {loc('analysis_script.py'): {22L: (0,
        None,
        1,
        0)},
                     loc('bitalino_parser.py'): {18L: (0,
        None,
        1,
        0)}}
guimgr.overall-gui-state = {'windowing-policy': 'combined-window',
                            'windows': [{'name': 'QZfaVazMN6F17Nd18ha3Psrntc'\
        'zvnm91',
        'size-state': '',
        'type': 'dock',
        'view': {'area': 'tall',
                 'constraint': None,
                 'current_pages': [0,
                                   0],
                 'full-screen': False,
                 'notebook_display': 'normal',
                 'notebook_percent': 0.25,
                 'override_title': None,
                 'pagelist': [('project',
                               'tall',
                               0,
                               {'tree-state': {'file-sort-method': 'by name',
        'list-files-first': False,
        'tree-states': {'deep': {'expanded-nodes': [],
                                 'selected-nodes': [(4,)],
                                 'top-node': (0,)}},
        'tree-style': 'deep'}}),
                              ('browser',
                               'tall',
                               0,
                               {'all_tree_states': {loc('../../Anaconda3/Lib/site-packages/sklearn/linear_model/base.py'): {'e'\
        'xpanded-nodes': [],
        'selected-nodes': [],
        'top-node': [('function def',
                      loc('../../Anaconda3/Lib/site-packages/sklearn/linear_model/base.py'),
                      'center_data')]},
        loc('../../Anaconda3/Lib/socket.py'): {'expanded-nodes': [],
        'selected-nodes': [],
        'top-node': [('function def',
                      loc('../../Anaconda3/Lib/socket.py'),
                      'create_connection')]},
        loc('../../Anaconda3/envs/twisted/Lib/site-packages/twisted/web/http.py'): {'e'\
        'xpanded-nodes': [],
        'selected-nodes': [],
        'top-node': [('generic attribute',
                      loc('../../Anaconda3/envs/twisted/Lib/site-packages/twisted/web/http.py'),
                      'CACHED')]},
        loc('../../Anaconda3/lib/site-packages/sklearn/base.py'): {'expanded'\
        '-nodes': [],
        'selected-nodes': [],
        'top-node': [('class def',
                      loc('../../Anaconda3/lib/site-packages/sklearn/base.py'),
                      'BaseEstimator')]},
        loc('../../Anaconda3/lib/site-packages/sklearn/utils/validation.py'): {'e'\
        'xpanded-nodes': [],
        'selected-nodes': [],
        'top-node': [('function def',
                      loc('../../Anaconda3/lib/site-packages/sklearn/utils/validation.py'),
                      'assert_all_finite')]},
        loc('../handson-ml/my_version.py'): {'expanded-nodes': [],
        'selected-nodes': [[('generic attribute',
                             loc('../handson-ml/my_version.py'),
                             'CHAPTER_ID')]],
        'top-node': [('generic attribute',
                      loc('../handson-ml/my_version.py'),
                      'CHAPTER_ID')]},
        loc('../myhandson/myscript.py'): {'expanded-nodes': [],
        'selected-nodes': [],
        'top-node': [('generic attribute',
                      loc('../myhandson/myscript.py'),
                      'abba')]},
        loc('../sod_empatica/final_empatica.py'): {'expanded-nodes': [],
        'selected-nodes': [[('generic attribute',
                             loc('../sod_empatica/final_empatica.py'),
                             'the_logger')]],
        'top-node': [('generic attribute',
                      loc('../sod_empatica/final_empatica.py'),
                      'args')]},
        loc('../twisted_book/dynamic_content.py'): {'expanded-nodes': [],
        'selected-nodes': [],
        'top-node': None},
        loc('../twisted_book/echoclient.py'): {'expanded-nodes': [],
        'selected-nodes': [],
        'top-node': [('class def',
                      loc('../twisted_book/echoclient.py'),
                      'EchoClient')]},
        loc('../twisted_book/echoserver.py'): {'expanded-nodes': [],
        'selected-nodes': [],
        'top-node': [('class def',
                      loc('../twisted_book/echoserver.py'),
                      'Echo')]},
        loc('../twisted_book/headlineRetriever.py'): {'expanded-nodes': [],
        'selected-nodes': [],
        'top-node': [('generic attribute',
                      loc('../twisted_book/headlineRetriever.py'),
                      'd')]},
        loc('../twisted_book/print_resource.py'): {'expanded-nodes': [],
        'selected-nodes': [],
        'top-node': [('generic attribute',
                      loc('../twisted_book/print_resource.py'),
                      'd')]},
        loc('../twisted_book/quoteserver.py'): {'expanded-nodes': [],
        'selected-nodes': [],
        'top-node': None},
        loc('../twisted_book/static_content.py'): {'expanded-nodes': [],
        'selected-nodes': [],
        'top-node': [('generic attribute',
                      loc('../twisted_book/static_content.py'),
                      'factory')]},
        loc('unknown:<untitled> #2'): {'expanded-nodes': [],
                                       'selected-nodes': [],
                                       'top-node': None},
        loc('unknown:<untitled> #1'): {'expanded-nodes': [],
                                       'selected-nodes': [None],
                                       'top-node': None}},
                                'browse_mode': u'Current Module',
                                'follow-selection': False,
                                'sort_mode': 'Alphabetically',
                                'visibility_options': {u'Derived Classes': False,
        u'Imported': False,
        u'Modules': True}}),
                              ('snippets',
                               'tall',
                               0,
                               {'tree-states': {'__all__': [],
        u'c': [],
        u'django': [],
        u'html': [],
        u'py': []}}),
                              ('source-assistant',
                               'tall',
                               2,
                               {}),
                              ('debug-stack',
                               'tall',
                               1,
                               {'codeline-mode': 'below'}),
                              ('indent',
                               'tall',
                               2,
                               {})],
                 'primary_view_state': {'area': 'wide',
        'constraint': None,
        'current_pages': [3,
                          4],
        'notebook_display': 'normal',
        'notebook_percent': 0.4555497106785902,
        'override_title': None,
        'pagelist': [('batch-search',
                      'wide',
                      0,
                      {'fScope': {'fFileSetName': 'All Source Files',
                                  'fLocation': None,
                                  'fRecursive': True,
                                  'fType': 'project-files'},
                       'fSearchSpec': {'fEndPos': None,
                                       'fIncludeLinenos': True,
                                       'fInterpretBackslashes': False,
                                       'fMatchCase': False,
                                       'fOmitBinary': True,
                                       'fRegexFlags': 42,
                                       'fReplaceText': '',
                                       'fReverse': False,
                                       'fSearchText': '',
                                       'fStartPos': 0,
                                       'fStyle': 'text',
                                       'fWholeWords': False,
                                       'fWrap': True},
                       'fUIOptions': {'fAutoBackground': True,
                                      'fFilePrefix': 'short-file',
                                      'fFindAfterReplace': True,
                                      'fInSelection': False,
                                      'fIncremental': True,
                                      'fReplaceOnDisk': False,
                                      'fShowFirstMatch': False,
                                      'fShowLineno': True,
                                      'fShowReplaceWidgets': False},
                       'replace-entry-expanded': False,
                       'search-entry-expanded': False}),
                     ('interactive-search',
                      'wide',
                      0,
                      {'fScope': {'fFileSetName': 'All Source Files',
                                  'fLocation': None,
                                  'fRecursive': True,
                                  'fType': 'project-files'},
                       'fSearchSpec': {'fEndPos': None,
                                       'fIncludeLinenos': True,
                                       'fInterpretBackslashes': False,
                                       'fMatchCase': False,
                                       'fOmitBinary': True,
                                       'fRegexFlags': 42,
                                       'fReplaceText': '',
                                       'fReverse': False,
                                       'fSearchText': '',
                                       'fStartPos': 0,
                                       'fStyle': 'text',
                                       'fWholeWords': False,
                                       'fWrap': True},
                       'fUIOptions': {'fAutoBackground': True,
                                      'fFilePrefix': 'short-file',
                                      'fFindAfterReplace': True,
                                      'fInSelection': False,
                                      'fIncremental': True,
                                      'fReplaceOnDisk': False,
                                      'fShowFirstMatch': False,
                                      'fShowLineno': True,
                                      'fShowReplaceWidgets': False}}),
                     ('debug-data',
                      'wide',
                      0,
                      {}),
                     ('debug-exceptions',
                      'wide',
                      0,
                      {}),
                     ('debug-breakpoints',
                      'wide',
                      0,
                      {}),
                     ('testing',
                      'wide',
                      0,
                      {'added-files': [],
                       'filter': u'',
                       'recent-filters': None,
                       'sort-order': 'alpha',
                       'tree-state': {'expanded-nodes': [],
                                      'selected-nodes': [],
                                      'top-node': (0,)}}),
                     ('versioncontrol.git',
                      'wide',
                      0,
                      {}),
                     ('debug-io',
                      'wide',
                      1,
                      {}),
                     ('debug-probe',
                      'wide',
                      2,
                      {'active-range': (None,
        -1,
        -1),
                       'attrib-starts': [],
                       'first-line': 0L,
                       'folded-linenos': [],
                       'history': {u'file:c:/Users/ilkka/code/booth_analysis/analysis_script.py': ['b'\
        'italino_data\n']},
                       'launch-id': None,
                       'sel-line': 1L,
                       'sel-line-start': 15L,
                       'selection_end': 15L,
                       'selection_start': 15L,
                       'zoom': 0L}),
                     ('debug-watch',
                      'wide',
                      1,
                      {'node-states': [],
                       'tree-state': {'expanded-nodes': [],
                                      'selected-nodes': [],
                                      'top-node': (0,)}}),
                     ('debug-modules',
                      'wide',
                      1,
                      {}),
                     ('python-shell',
                      'wide',
                      2,
                      {'active-range': (None,
        -1,
        -1),
                       'attrib-starts': [],
                       'first-line': 396L,
                       'folded-linenos': [],
                       'history': {None: ['import numpy as np\n',
        'duh = np.array(1, 2, 3, 4)\n',
        'duh = np.array([1, 2, 3, 4])\n',
        'duh\n',
        'DATA_ROOT_DIR = "C:\\Users\\ilkka\\data\\Booth\\experiment\\"\n\n\n'\
        'import h5py\n',
        'DATA_ROOT_DIR = "C:\\\\Users\\\\ilkka\\\\data\\\\Booth\\\\experimen'\
        't\\\\"\n\n\nimport h5py\n',
        '\nEXAMPLE_DIR = DATA_ROOT_DIR + "example\n',
        'DATA_ROOT_DIR\n',
        'DATA_ROOT_DIR + "alsdkfj"\n',
        'DATA_ROOT_DIR = "C:\\\\Users\\\\ilkka\\\\data\\\\Booth\\\\experimen'\
        't\\\\"\n\nEXAMPLE_DIR = DATA_ROOT_DIR + "example"\n\n',
        'EXAMPLE_DIR\n',
        'DATA_ROOT_DIR = "C:\\\\Users\\\\ilkka\\\\data\\\\Booth\\\\experimen'\
        't\\\\"\n\nEXAMPLE_DIR = DATA_ROOT_DIR + "example"\n\n\nimport h5py'\
        '\nfrom arduino_parser import parse_arduino_file\n\nparse_arduino_fi'\
        'le(EXAMPLE_DIR)\n',
        '\nimport h5py\n# from arduino_parser import parse_arduino_file\nimp'\
        'ort arduino_parser\n\narduino_parser.parse_arduino_file(EXAMPLE_DIR'\
        ')\n',
        'import arduino_parser\n',
        '\nfrom . arduino_parser.py import parse_arduino_file\n',
        'import os\nos.chdir(os.path.dirname(__file__))\nprint(os.getcwd())'\
        '\n',
        'import os\n',
        'os.getcwd()\n',
        'help os.chdir\n',
        'help(os.chdir)\n',
        '\nimport os\nos.chdir("C:\\\\Users\\\\ilkka\\\\code\\\\booth_analys'\
        'is")\n',
        '\nimport arduino_parser\n\narduino_parser.parse_arduino_file(EXAMPL'\
        'E_DIR)\n',
        'DATA_ROOT_DIR = "C:\\\\Users\\\\ilkka\\\\data\\\\Booth\\\\experimen'\
        't\\\\"\n\nEXAMPLE_DIR = DATA_ROOT_DIR + "example"\nARDUINO_DIR = EX'\
        'AMPLE_DIR + "arduino"\n\n# The following silly snippet might be nee'\
        'ded when running\n#  stuff in Wing IDE python shell which seems not'\
        ' to default\n#  into the project working directory\n#import os\n#os'\
        '.chdir("C:\\\\Users\\\\ilkka\\\\code\\\\booth_analysis")\n\nimport '\
        'h5py\n# from arduino_parser import parse_arduino_file\n\nimport ard'\
        'uino_parser\n\narduino_parser.parse_arduino_file(ARDUINO_DIR)\n',
        "def parse_arduino_file(directory):\n    'We assume that the Arduino"\
        " directry only has one file for each participant'\n    print(\"we a"\
        "re parsing arduino file in directory: \" + str(filename))\n \n",
        'help(parse_arduino_file)\n',
        '\narduino_parser.parse_arduino_file(ARDUINO_DIR)\n',
        'arduino_parser.__code__\n',
        'importlib.reload()\n',
        'reload(arduino_parser)\n',
        'imp.reload\n',
        'import imp\n',
        'imp.reload(arduino_parser)\n',
        'arduino_parser.parse_arduino_file(ARDUINO_DIR)\n\n',
        'DATA_ROOT_DIR = "C:\\\\Users\\\\ilkka\\\\data\\\\Booth\\\\experimen'\
        't\\\\"\n\nEXAMPLE_DIR = DATA_ROOT_DIR + "example"\nARDUINO_DIR = EX'\
        'AMPLE_DIR + "\\\\arduino\\\\"\n\n# The following silly snippet migh'\
        't be needed when running\n#  stuff in Wing IDE python shell which s'\
        'eems not to default\n#  into the project working directory\n#import'\
        ' os\n#os.chdir("C:\\\\Users\\\\ilkka\\\\code\\\\booth_analysis")\n'\
        '\nimport h5py\n# from arduino_parser import parse_arduino_file\n\n'\
        'import arduino_parser\n\narduino_parser.parse_arduino_file(ARDUINO_'\
        'DIR)\n\n',
        'DATA_ROOT_DIR = "C:\\\\Users\\\\ilkka\\\\data\\\\Booth\\\\experimen'\
        't\\\\"\n\nEXAMPLE_DIR = DATA_ROOT_DIR + "example"\nARDUINO_DIR = EX'\
        'AMPLE_DIR + "\\\\arduino\\\\"\n\n# The following silly snippet migh'\
        't be needed when running\n#  stuff in Wing IDE python shell which s'\
        'eems not to default\n#  into the project working directory\n#import'\
        ' os\n#os.chdir("C:\\\\Users\\\\ilkka\\\\code\\\\booth_analysis")\n'\
        '\nimport h5py\n# from arduino_parser import parse_arduino_file\n\n'\
        'import arduino_parser\nimport imp\narduino_parser.parse_arduino_fil'\
        'e(ARDUINO_DIR)\nimp.reload(arduino_parser)\n',
        'arduino_parser.parse_arduino_file(ARDUINO_DIR)\n',
        'DATA_ROOT_DIR = "C:\\\\Users\\\\ilkka\\\\data\\\\Booth\\\\experimen'\
        't\\\\"\n\nEXAMPLE_DIR = DATA_ROOT_DIR + "example"\nARDUINO_DIR = EX'\
        'AMPLE_DIR + "\\\\arduino\\\\"\n\n# The following silly snippet migh'\
        't be needed when running\n#  stuff in Wing IDE python shell which s'\
        'eems not to default\n#  into the project working directory\n#import'\
        ' os\n#os.chdir("C:\\\\Users\\\\ilkka\\\\code\\\\booth_analysis")\n'\
        '\nimport h5py\n# from arduino_parser import parse_arduino_file\n\n'\
        'import arduino_parser\nimport imp\nimp.reload(arduino_parser)\nardu'\
        'ino_parser.parse_arduino_file(ARDUINO_DIR)\n',
        'imp.reload(arduino_parser)\narduino_parser.parse_arduino_file(ARDUI'\
        'NO_DIR)\n',
        'type(DATA_ROOT_DIR)\n',
        'type(data)\n',
        "import os\nimport pandas as pd\n\ndef parse_arduino_directory(direc"\
        "tory):\n    'We assume that the Arduino directry only has one file "\
        "for each participant'\n    print(\"we are parsing arduino file in d"\
        "irectory: \" + str(directory))\n    \n    for root, dirs, files in "\
        "os.walk(directory):\n        for filename in files:\n            re"\
        "turn parse_arduino_file(directory + filename)\n            \ndef pa"\
        "rse_arduino_file(filename):\n    print(\"parsing file: \" + str(fil"\
        "ename))\n    data = pd.read_csv('filename', header = None)\n    ret"\
        "urn data\n    \n",
        'imp.reload(arduino_parser)\ndata = arduino_parser.parse_arduino_fil'\
        'e(ARDUINO_DIR)\n\n',
        'imp.reload(arduino_parser)\ndata = arduino_parser.parse_arduino_fil'\
        'e(ARDUINO_DIR)\n',
        'data\n',
        'data[0, 0]\n',
        'data(0, 0)\n',
        'data.dtypes\n',
        'imp.reload(arduino_parser)\ndata = arduino_parser.parse_arduino_dir'\
        'ectory(ARDUINO_DIR)\n',
        'df.head()\n',
        'data.head()\n',
        'help(parse_arduino_directory)\n',
        'arduino_data = arduino_parser.parse_arduino_directory(ARDUINO_DIR)'\
        '\n',
        'imp.reload(arduino_parser)\narduino_data = arduino_parser.parse_ard'\
        'uino_directory(ARDUINO_DIR)\n',
        'arduino_data.head()\n',
        'if "shit" in shitty: print("oh shit")\n',
        'if "shit" in  "shitty": print("oh shit")\n',
        'if "shot" in  "shitty": print("oh shit")\n',
        'DATA_ROOT_DIR = "C:\\\\Users\\\\ilkka\\\\data\\\\Booth\\\\experimen'\
        't\\\\"\n\nEXAMPLE_DIR = DATA_ROOT_DIR + "example"\nARDUINO_DIR = EX'\
        'AMPLE_DIR + "\\\\arduino\\\\"\nBITALINO_DIR = EXAMPLE_DIR + "\\\\bi'\
        'talino\\\\"\n\n# The following silly snippet might be needed when r'\
        'unning\n#  stuff in Wing IDE python shell which seems not to defaul'\
        't\n#  into the project working directory\n#import os\n#os.chdir("C:'\
        '\\\\Users\\\\ilkka\\\\code\\\\booth_analysis")\n\nimport h5py\n# fr'\
        'om arduino_parser import parse_arduino_file\n\nimport arduino_parse'\
        'r\nimport bitalino_parser\nimport imp\nimp.reload(arduino_parser)\n'\
        'imp.reload(bitalino_parser)\narduino_data = arduino_parser.parse_ar'\
        'duino_directory(ARDUINO_DIR)\nbitalino_data = bitalino_parser.parse'\
        '_bitalino_directory(directory)\n',
        'DATA_ROOT_DIR = "C:\\\\Users\\\\ilkka\\\\data\\\\Booth\\\\experimen'\
        't\\\\"\n\nEXAMPLE_DIR = DATA_ROOT_DIR + "example"\nARDUINO_DIR = EX'\
        'AMPLE_DIR + "\\\\arduino\\\\"\nBITALINO_DIR = EXAMPLE_DIR + "\\\\bi'\
        'talino\\\\"\n\n# The following silly snippet might be needed when r'\
        'unning\n#  stuff in Wing IDE python shell which seems not to defaul'\
        't\n#  into the project working directory\n#import os\n#os.chdir("C:'\
        '\\\\Users\\\\ilkka\\\\code\\\\booth_analysis")\n\nimport h5py\n# fr'\
        'om arduino_parser import parse_arduino_file\n\nimport arduino_parse'\
        'r\nimport bitalino_parser\nimport imp\nimp.reload(arduino_parser)\n'\
        'imp.reload(bitalino_parser)\narduino_data = arduino_parser.parse_ar'\
        'duino_directory(ARDUINO_DIR)\nbitalino_data = bitalino_parser.parse'\
        '_bitalino_directory(BITALINO_DIR)\n',
        'bitalino_data.head()\n',
        'imp.reload(bitalino_parser)\n# arduino_data = arduino_parser.parse_'\
        'arduino_directory(ARDUINO_DIR)\nbitalino_data = bitalino_parser.par'\
        'se_bitalino_directory(BITALINO_DIR)\n',
        'BITALINO_DIR\n']},
                       'launch-id': None,
                       'sel-line': 426L,
                       'sel-line-start': 20660L,
                       'selection_end': 20660L,
                       'selection_start': 20660L,
                       'zoom': 0L}),
                     ('bookmarks',
                      'wide',
                      1,
                      {}),
                     ('messages',
                      'wide',
                      2,
                      {'current-domain': 0}),
                     ('os-command',
                      'wide',
                      1,
                      {'last-percent': 0.8,
                       'toolbox-percent': 1.0,
                       'toolbox-tree-sel': 'cmd-t243o40ayMK8zxfc'})],
        'primary_view_state': {'editor_states': ({'bookmarks': ([[loc('arduino_parser.py'),
        {'attrib-starts': [('parse_arduino_directory',
                            3)],
         'first-line': 0L,
         'folded-linenos': [],
         'sel-line': 13L,
         'sel-line-start': 410L,
         'selection_end': 440L,
         'selection_start': 440L,
         'zoom': 0L},
        1554452020.295],
        [loc('bitalino_parser.py'),
         {'attrib-starts': [],
          'first-line': 0L,
          'folded-linenos': [],
          'sel-line': 1L,
          'sel-line-start': 21L,
          'selection_end': 21L,
          'selection_start': 21L,
          'zoom': 0L},
         1554452030.908],
        [loc('analysis_script.py'),
         {'attrib-starts': [],
          'first-line': 3L,
          'folded-linenos': [],
          'sel-line': 16L,
          'sel-line-start': 478L,
          'selection_end': 574L,
          'selection_start': 478L,
          'zoom': 0L},
         1554452032.208],
        [loc('arduino_parser.py'),
         {'attrib-starts': [],
          'first-line': 0L,
          'folded-linenos': [],
          'sel-line': 0L,
          'sel-line-start': 0L,
          'selection_end': 0L,
          'selection_start': 0L,
          'zoom': 0L},
         1554452051.464],
        [loc('bitalino_parser.py'),
         {'attrib-starts': [('parse_bitalino_file',
                             15)],
          'first-line': 0L,
          'folded-linenos': [],
          'sel-line': 17L,
          'sel-line-start': 549L,
          'selection_end': 550L,
          'selection_start': 550L,
          'zoom': 0L},
         1554452219.68],
        [loc('analysis_script.py'),
         {'attrib-starts': [],
          'first-line': 0L,
          'folded-linenos': [],
          'sel-line': 10L,
          'sel-line-start': 369L,
          'selection_end': 389L,
          'selection_start': 389L,
          'zoom': 0L},
         1554452305.451],
        [loc('bitalino_parser.py'),
         {'attrib-starts': [('parse_bitalino_file',
                             15)],
          'first-line': 0L,
          'folded-linenos': [],
          'sel-line': 17L,
          'sel-line-start': 549L,
          'selection_end': 550L,
          'selection_start': 550L,
          'zoom': 0L},
         1554452309.927],
        [loc('analysis_script.py'),
         {'attrib-starts': [],
          'first-line': 0L,
          'folded-linenos': [],
          'sel-line': 21L,
          'sel-line-start': 672L,
          'selection_end': 672L,
          'selection_start': 672L,
          'zoom': 0L},
         1554452323.238],
        [loc('bitalino_parser.py'),
         {'attrib-starts': [('parse_bitalino_directory',
                             3)],
          'first-line': 0L,
          'folded-linenos': [],
          'sel-line': 10L,
          'sel-line-start': 280L,
          'selection_end': 280L,
          'selection_start': 280L,
          'zoom': 0L},
         1554452325.379],
        [loc('../../Anaconda3/envs/ml/Lib/os.py'),
         {'attrib-starts': [('walk',
                             276)],
          'first-line': 298L,
          'folded-linenos': [],
          'sel-line': 334L,
          'sel-line-start': 12032L,
          'selection_end': 12032L,
          'selection_start': 12032L,
          'zoom': 0L},
         1554452329.213],
        [loc('bitalino_parser.py'),
         {'attrib-starts': [('parse_bitalino_directory',
                             3)],
          'first-line': 0L,
          'folded-linenos': [],
          'sel-line': 10L,
          'sel-line-start': 280L,
          'selection_end': 280L,
          'selection_start': 280L,
          'zoom': 0L},
         1554452335.085],
        [loc('analysis_script.py'),
         {'attrib-starts': [],
          'first-line': 0L,
          'folded-linenos': [],
          'sel-line': 21L,
          'sel-line-start': 672L,
          'selection_end': 672L,
          'selection_start': 672L,
          'zoom': 0L},
         1554452361.421],
        [loc('bitalino_parser.py'),
         {'attrib-starts': [('parse_bitalino_directory',
                             3)],
          'first-line': 0L,
          'folded-linenos': [],
          'sel-line': 10L,
          'sel-line-start': 280L,
          'selection_end': 280L,
          'selection_start': 280L,
          'zoom': 0L},
         1554452371.974],
        [loc('analysis_script.py'),
         {'attrib-starts': [],
          'first-line': 0L,
          'folded-linenos': [],
          'sel-line': 21L,
          'sel-line-start': 672L,
          'selection_end': 672L,
          'selection_start': 672L,
          'zoom': 0L},
         1554452380.596],
        [loc('bitalino_parser.py'),
         {'attrib-starts': [('parse_bitalino_directory',
                             3)],
          'first-line': 0L,
          'folded-linenos': [],
          'sel-line': 10L,
          'sel-line-start': 280L,
          'selection_end': 280L,
          'selection_start': 280L,
          'zoom': 0L},
         1554452381.547],
        [loc('../../Anaconda3/envs/ml/Lib/os.py'),
         {'attrib-starts': [('walk',
                             276)],
          'first-line': 311L,
          'folded-linenos': [],
          'sel-line': 344L,
          'sel-line-start': 12429L,
          'selection_end': 12429L,
          'selection_start': 12429L,
          'zoom': 0L},
         1554452386.058],
        [loc('bitalino_parser.py'),
         {'attrib-starts': [('parse_bitalino_file',
                             16)],
          'first-line': 0L,
          'folded-linenos': [],
          'sel-line': 21L,
          'sel-line-start': 679L,
          'selection_end': 715L,
          'selection_start': 715L,
          'zoom': 0L},
         1554452419.174],
        [loc('arduino_parser.py'),
         {'attrib-starts': [],
          'first-line': 0L,
          'folded-linenos': [],
          'sel-line': 0L,
          'sel-line-start': 0L,
          'selection_end': 0L,
          'selection_start': 0L,
          'zoom': 0L},
         1554452420.513],
        [loc('analysis_script.py'),
         {'attrib-starts': [],
          'first-line': 0L,
          'folded-linenos': [],
          'sel-line': 19L,
          'sel-line-start': 575L,
          'selection_end': 746L,
          'selection_start': 575L,
          'zoom': 0L},
         1554452463.254],
        [loc('README.md'),
         {'attrib-starts': [],
          'first-line': 0L,
          'folded-linenos': [],
          'sel-line': 3L,
          'sel-line-start': 33L,
          'selection_end': 137L,
          'selection_start': 137L,
          'zoom': 0L},
         1554452529.377]],
        20),
        'current-loc': loc('analysis_script.py'),
        'editor-state-list': [(loc('analysis_script.py'),
                               {'attrib-starts': [],
                                'first-line': 0L,
                                'folded-linenos': [],
                                'sel-line': 19L,
                                'sel-line-start': 575L,
                                'selection_end': 746L,
                                'selection_start': 575L,
                                'zoom': 0L}),
                              (loc('arduino_parser.py'),
                               {'attrib-starts': [],
                                'first-line': 0L,
                                'folded-linenos': [],
                                'sel-line': 0L,
                                'sel-line-start': 0L,
                                'selection_end': 0L,
                                'selection_start': 0L,
                                'zoom': 0L}),
                              (loc('bitalino_parser.py'),
                               {'attrib-starts': [('parse_bitalino_file',
        16)],
                                'first-line': 0L,
                                'folded-linenos': [],
                                'sel-line': 21L,
                                'sel-line-start': 679L,
                                'selection_end': 715L,
                                'selection_start': 715L,
                                'zoom': 0L}),
                              (loc('../../../../Program Files (x86)/Steam/steamapps/common/Wing Pro 6/resources/doc/en/TOC.idx'),
                               {'displayed-index': 127,
                                'viewer-state': {'history': [-1,
        127],
        'history-pos': 1,
        'index': 127,
        'top': 0,
        'top-left-pos': 0}}),
                              (loc('README.md'),
                               {'attrib-starts': [],
                                'first-line': 0L,
                                'folded-linenos': [],
                                'sel-line': 3L,
                                'sel-line-start': 33L,
                                'selection_end': 137L,
                                'selection_start': 137L,
                                'zoom': 0L})],
        'has-focus': True,
        'locked': False},
        [loc('analysis_script.py'),
         loc('arduino_parser.py'),
         loc('bitalino_parser.py'),
         loc('../../../../Program Files (x86)/Steam/steamapps/common/Wing Pro 6/resources/doc/en/TOC.idx'),
         loc('README.md')]),
                               'open_files': [u'../../../../Program Files (x86)/Steam/steamapps/common/Wing Pro 6/resources/doc/en/TOC.idx',
        u'bitalino_parser.py',
        u'arduino_parser.py',
        u'README.md',
        u'analysis_script.py']},
        'saved_notebook_display': None,
        'split_percents': {0: 0.1986062717770035},
        'splits': 2,
        'tab_location': 'top',
        'user_data': {}},
                 'saved_notebook_display': None,
                 'split_percents': {0: 0.5},
                 'splits': 2,
                 'tab_location': 'left',
                 'user_data': {}},
        'window-alloc': (0,
                         -1,
                         3860,
                         2119)}]}
guimgr.recent-documents = [loc('analysis_script.py'),
                           loc('README.md'),
                           loc('arduino_parser.py'),
                           loc('bitalino_parser.py')]
guimgr.visual-state = {loc('arduino_parser.py'): {'attrib-starts': [('parse_'\
        'arduino_file',
        2)],
        'first-line': 0L,
        'folded-linenos': [],
        'sel-line': 11L,
        'sel-line-start': 350L,
        'selection_end': 362L,
        'selection_start': 362L,
        'zoom': 0L}}
proj.pyexec = {None: ('custom',
                      u'c:\\Users\\ilkka\\Anaconda3\\envs\\ml\\python.exe')}
testing.stored-results = (1,
                          [],
                          {})
versioncontrol.git.remote-history = ['git@github.com:BasalGanglia/booth_anal'\
                                     'ysis.git']
