#!wing
#!version=6.0
##################################################################
# Wing IDE project file : User-specific branch                   #
##################################################################
[user attributes]
guimgr.overall-gui-state = {'windowing-policy': 'combined-window',
                            'windows': [{'name': 'QZfaVazMN6F17Nd18ha3Psrntc'\
        'zvnm91',
        'size-state': 'maximized',
        'type': 'dock',
        'view': {'area': 'tall',
                 'constraint': None,
                 'current_pages': [0,
                                   0],
                 'full-screen': False,
                 'notebook_display': 'normal',
                 'notebook_percent': 0.25,
                 'override_title': None,
                 'pagelist': [('project',
                               'tall',
                               0,
                               {'tree-state': {'file-sort-method': 'by name',
        'list-files-first': False,
        'tree-states': {'deep': {'expanded-nodes': [],
                                 'selected-nodes': [(0,)],
                                 'top-node': (0,)}},
        'tree-style': 'deep'}}),
                              ('browser',
                               'tall',
                               0,
                               {'all_tree_states': {loc('../../Anaconda3/Lib/site-packages/sklearn/linear_model/base.py'): {'e'\
        'xpanded-nodes': [],
        'selected-nodes': [],
        'top-node': [('function def',
                      loc('../../Anaconda3/Lib/site-packages/sklearn/linear_model/base.py'),
                      'center_data')]},
        loc('../../Anaconda3/Lib/socket.py'): {'expanded-nodes': [],
        'selected-nodes': [],
        'top-node': [('function def',
                      loc('../../Anaconda3/Lib/socket.py'),
                      'create_connection')]},
        loc('../../Anaconda3/envs/twisted/Lib/site-packages/twisted/web/http.py'): {'e'\
        'xpanded-nodes': [],
        'selected-nodes': [],
        'top-node': [('generic attribute',
                      loc('../../Anaconda3/envs/twisted/Lib/site-packages/twisted/web/http.py'),
                      'CACHED')]},
        loc('../../Anaconda3/lib/site-packages/sklearn/base.py'): {'expanded'\
        '-nodes': [],
        'selected-nodes': [],
        'top-node': [('class def',
                      loc('../../Anaconda3/lib/site-packages/sklearn/base.py'),
                      'BaseEstimator')]},
        loc('../../Anaconda3/lib/site-packages/sklearn/utils/validation.py'): {'e'\
        'xpanded-nodes': [],
        'selected-nodes': [],
        'top-node': [('function def',
                      loc('../../Anaconda3/lib/site-packages/sklearn/utils/validation.py'),
                      'assert_all_finite')]},
        loc('../handson-ml/my_version.py'): {'expanded-nodes': [],
        'selected-nodes': [[('generic attribute',
                             loc('../handson-ml/my_version.py'),
                             'CHAPTER_ID')]],
        'top-node': [('generic attribute',
                      loc('../handson-ml/my_version.py'),
                      'CHAPTER_ID')]},
        loc('../myhandson/myscript.py'): {'expanded-nodes': [],
        'selected-nodes': [],
        'top-node': [('generic attribute',
                      loc('../myhandson/myscript.py'),
                      'abba')]},
        loc('../sod_empatica/final_empatica.py'): {'expanded-nodes': [],
        'selected-nodes': [[('generic attribute',
                             loc('../sod_empatica/final_empatica.py'),
                             'the_logger')]],
        'top-node': [('generic attribute',
                      loc('../sod_empatica/final_empatica.py'),
                      'args')]},
        loc('../twisted_book/dynamic_content.py'): {'expanded-nodes': [],
        'selected-nodes': [],
        'top-node': None},
        loc('../twisted_book/echoclient.py'): {'expanded-nodes': [],
        'selected-nodes': [],
        'top-node': [('class def',
                      loc('../twisted_book/echoclient.py'),
                      'EchoClient')]},
        loc('../twisted_book/echoserver.py'): {'expanded-nodes': [],
        'selected-nodes': [],
        'top-node': [('class def',
                      loc('../twisted_book/echoserver.py'),
                      'Echo')]},
        loc('../twisted_book/headlineRetriever.py'): {'expanded-nodes': [],
        'selected-nodes': [],
        'top-node': [('generic attribute',
                      loc('../twisted_book/headlineRetriever.py'),
                      'd')]},
        loc('../twisted_book/print_resource.py'): {'expanded-nodes': [],
        'selected-nodes': [],
        'top-node': [('generic attribute',
                      loc('../twisted_book/print_resource.py'),
                      'd')]},
        loc('../twisted_book/quoteserver.py'): {'expanded-nodes': [],
        'selected-nodes': [],
        'top-node': None},
        loc('../twisted_book/static_content.py'): {'expanded-nodes': [],
        'selected-nodes': [],
        'top-node': [('generic attribute',
                      loc('../twisted_book/static_content.py'),
                      'factory')]},
        loc('unknown:<untitled> #8'): {'expanded-nodes': [],
                                       'selected-nodes': [],
                                       'top-node': None},
        loc('unknown:<untitled> #7'): {'expanded-nodes': [],
                                       'selected-nodes': [None],
                                       'top-node': None}},
                                'browse_mode': u'Current Module',
                                'follow-selection': False,
                                'sort_mode': 'Alphabetically',
                                'visibility_options': {u'Derived Classes': False,
        u'Imported': False,
        u'Modules': True}}),
                              ('snippets',
                               'tall',
                               0,
                               {'tree-states': {'__all__': [],
        u'c': [],
        u'django': [],
        u'html': [],
        u'py': []}}),
                              ('source-assistant',
                               'tall',
                               2,
                               {}),
                              ('debug-stack',
                               'tall',
                               1,
                               {'codeline-mode': 'below'}),
                              ('indent',
                               'tall',
                               2,
                               {})],
                 'primary_view_state': {'area': 'wide',
        'constraint': None,
        'current_pages': [6,
                          4],
        'notebook_display': 'normal',
        'notebook_percent': 0.4555497106785902,
        'override_title': None,
        'pagelist': [('batch-search',
                      'wide',
                      0,
                      {'fScope': {'fFileSetName': 'All Source Files',
                                  'fLocation': None,
                                  'fRecursive': True,
                                  'fType': 'project-files'},
                       'fSearchSpec': {'fEndPos': None,
                                       'fIncludeLinenos': True,
                                       'fInterpretBackslashes': False,
                                       'fMatchCase': False,
                                       'fOmitBinary': True,
                                       'fRegexFlags': 42,
                                       'fReplaceText': '',
                                       'fReverse': False,
                                       'fSearchText': '',
                                       'fStartPos': 0,
                                       'fStyle': 'text',
                                       'fWholeWords': False,
                                       'fWrap': True},
                       'fUIOptions': {'fAutoBackground': True,
                                      'fFilePrefix': 'short-file',
                                      'fFindAfterReplace': True,
                                      'fInSelection': False,
                                      'fIncremental': True,
                                      'fReplaceOnDisk': False,
                                      'fShowFirstMatch': False,
                                      'fShowLineno': True,
                                      'fShowReplaceWidgets': False},
                       'replace-entry-expanded': False,
                       'search-entry-expanded': False}),
                     ('interactive-search',
                      'wide',
                      0,
                      {'fScope': {'fFileSetName': 'All Source Files',
                                  'fLocation': None,
                                  'fRecursive': True,
                                  'fType': 'project-files'},
                       'fSearchSpec': {'fEndPos': None,
                                       'fIncludeLinenos': True,
                                       'fInterpretBackslashes': False,
                                       'fMatchCase': False,
                                       'fOmitBinary': True,
                                       'fRegexFlags': 42,
                                       'fReplaceText': '',
                                       'fReverse': False,
                                       'fSearchText': '',
                                       'fStartPos': 0,
                                       'fStyle': 'text',
                                       'fWholeWords': False,
                                       'fWrap': True},
                       'fUIOptions': {'fAutoBackground': True,
                                      'fFilePrefix': 'short-file',
                                      'fFindAfterReplace': True,
                                      'fInSelection': False,
                                      'fIncremental': True,
                                      'fReplaceOnDisk': False,
                                      'fShowFirstMatch': False,
                                      'fShowLineno': True,
                                      'fShowReplaceWidgets': False}}),
                     ('debug-data',
                      'wide',
                      0,
                      {}),
                     ('debug-exceptions',
                      'wide',
                      0,
                      {}),
                     ('debug-breakpoints',
                      'wide',
                      0,
                      {'tree-state': []}),
                     ('testing',
                      'wide',
                      0,
                      {'added-files': [],
                       'filter': u'',
                       'recent-filters': None,
                       'sort-order': 'alpha',
                       'tree-state': {'expanded-nodes': [],
                                      'selected-nodes': [],
                                      'top-node': (0,)}}),
                     ('versioncontrol.git',
                      'wide',
                      0,
                      {}),
                     ('debug-io',
                      'wide',
                      1,
                      {}),
                     ('debug-probe',
                      'wide',
                      2,
                      {'active-range': (None,
        -1,
        -1),
                       'attrib-starts': [],
                       'first-line': 0L,
                       'folded-linenos': [],
                       'history': {},
                       'launch-id': None,
                       'sel-line': 0L,
                       'sel-line-start': 0L,
                       'selection_end': 0L,
                       'selection_start': 0L,
                       'zoom': 0L}),
                     ('debug-watch',
                      'wide',
                      1,
                      {'node-states': [],
                       'tree-state': {'expanded-nodes': [],
                                      'selected-nodes': [],
                                      'top-node': (0,)}}),
                     ('debug-modules',
                      'wide',
                      1,
                      {}),
                     ('python-shell',
                      'wide',
                      2,
                      {'active-range': (None,
        -1,
        -1),
                       'attrib-starts': [],
                       'first-line': 176L,
                       'folded-linenos': [],
                       'history': {None: ['DATA_ROOT_DIR = "C:\\\\Users\\\\'\
        'ilkka\\\\data\\\\Booth\\\\experiment\\\\"\n\nEXAMPLE_DIR = DATA_ROO'\
        'T_DIR + "example"\nARDUINO_DIR = EXAMPLE_DIR + "\\\\arduino\\\\"\n'\
        'BITALINO_DIR = EXAMPLE_DIR + "\\\\bitalino\\\\"\n\n# The following '\
        'silly snippet might be needed when running\n#  stuff in Wing IDE py'\
        'thon shell which seems not to default\n#  into the project working '\
        'directory\nimport os\nos.chdir("C:\\\\Users\\\\ilkka\\\\code\\\\boo'\
        'th_analysis")\n\nimport h5py\n# from arduino_parser import parse_ar'\
        'duino_file\n\nimport arduino_parser\nimport bitalino_parser\nimport'\
        ' opensignals_reader\n\nimport imp\nimp.reload(arduino_parser)\nimp.'\
        'reload(bitalino_parser)\n# arduino_data = arduino_parser.parse_ardu'\
        'ino_directory(ARDUINO_DIR)\nbitalino_data2 = bitalino_parser.parse_'\
        'bitalino_directory(BITALINO_DIR)\n',
        'bitalino_data2 = bitalino_parser.parse_bitalino_directory(BITALINO_'\
        'DIR)\n',
        'imp.reload(bitalino_parser)\n# arduino_data = arduino_parser.parse_'\
        'arduino_directory(ARDUINO_DIR)\nbitalino_data2 = bitalino_parser.pa'\
        'rse_bitalino_directory(BITALINO_DIR)\n\n',
        'imp.reload(bitalino_parser)\n# arduino_data = arduino_parser.parse_'\
        'arduino_directory(ARDUINO_DIR)\nbitalino_data2 = bitalino_parser.pa'\
        'rse_bitalino_directory(BITALINO_DIR)\n\n\n',
        'bitalino_data2.head_information[0]\n',
        "bitalino_data2.head_information['0']\n",
        'type(bitaliano_data2.head_information)\n',
        '\ntype(bitalino_data2.head_information2)\n',
        '\ntype(bitalino_data2.head_information\n',
        'bitalino_data2\n',
        'bitalino_data2.head_information\n',
        'type(bitalino_data2.head_information)\n',
        "type(bitalino_data2.head_information['20:16:12:22:45:57'])\n",
        "bitalino_data2.head_information['20:16:12:22:45:57']\n",
        'bitalino_data2.len\n',
        'bitalino_data2.len()\n',
        'len(bitalino_data2)\n',
        'len(bitalino_data2.head_information)\n',
        'bitalino_data2.head_information.keys\n',
        'str(bitalino_data2.head_information.keys)\n',
        'next(iter(bitalino_data2.head_information))\n',
        'imp.reload(bitalino_parser)\n# arduino_data = arduino_parser.parse_'\
        'arduino_directory(ARDUINO_DIR)\nbitalino_data2 = bitalino_parser.pa'\
        'rse_bitalino_directory(BITALINO_DIR)\n',
        'puf.header\n',
        'puf.header()\n',
        "puf.header['sensor']\n",
        'puf.timestamp\n',
        'puf.bitalino_header()\n',
        'puf\n',
        'puf.head(9)\n',
        'import matplotlib as plt\n',
        'plt(puf[1:100, 1])\n',
        'plt(puf.iloc[1:100, 1])\n',
        'import matplotlib.pyplot as plt\n',
        'plt.plot(puf.iloc[1:100, 1])\n',
        'plt.show()\n',
        'plt.plot(puf.iloc[1:10000, 1])\n',
        'plt.plot(puf.iloc[1:100000, 1])\n',
        'plt.plot(puf.iloc[1:1000, 0])\n',
        'plt.plot(puf.iloc[1:10000, 0])\n',
        'puf.bitalino_header\n',
        'puf.bitalino_header.timestamp\n',
        'puf = bitalino_parser.parse_bitalino_directory(BITALINO_DIR)\n',
        'imp.reload(bitalino_parser)\npuf = bitalino_parser.parse_bitalino_d'\
        'irectory(BITALINO_DIR)\n',
        'puf.head()\n',
        'EEG_DIR = EXAMPLE_DIR + "\\\\eeg\\\\"\n',
        'import scipy.io as sio\n',
        'import EEG_parser\n',
        'muf = EEG_parser(EEG_DIR)\n',
        'muf = EEG_parser.parse_eeg_directory(EEG_DIR)\n',
        'import hdf5storage\n',
        'imp.reload(EEG_parser)\nmuf = EEG_parser.parse_eeg_directory(EEG_DI'\
        'R)\n',
        'muf\n',
        'muf.head()\n',
        'type(muf)\n',
        "ydata = muf['y']\n",
        'type(ydata)\n',
        'ydata.head()\n',
        'ydata.shape\n',
        'ydata[:, 0:3]\n',
        'muf.keys\n',
        'muf.keys()\n',
        'ydata[-6, 0]\n',
        'ydata[-6:, 0]\n',
        "data = mat_contents['y']\ntimerows = data[-6:, :]\n",
        'mat_contents = muf\n',
        "data = mat_contents['y']\ntimerows = data[-6:, :]\n\n",
        'timerows[:, 0:5]\n',
        'timerows[:, 0]\n',
        'timerows[:, 2]\n',
        'timerows.shape\n',
        'timerows_rotated = timerows.T\n',
        'timerows_rotated\n',
        'timerows_rotated.shape\n',
        'timerows_rotated[0, :]\n',
        'ydata[1, 1]\n',
        'ydata[1, 100]\n',
        'ydata[1, 10000]\n',
        'ydata[1, 10001]\n',
        'from scipy import signal\nimport matplotlib.pyplot as plt\nnp.rando'\
        'm.seed(1234)\n',
        'import numpy as np\nfrom scipy import signal\nimport matplotlib.pyp'\
        'lot as plt\nnp.random.seed(1234)\n',
        "import numpy as np\nfrom scipy import signal\nimport matplotlib.pyp"\
        "lot as plt\nnp.random.seed(1234)\n\nfs = 10e3\nN = 1e5\namp = 2 * n"\
        "p.sqrt(2)\nfreq = 1234.0\nnoise_power = 0.001 * fs / 2\ntime = np.a"\
        "rrange(N) / fs\nx = amp * np.sin(2 * np.pi * freq * time)\nx += np."\
        "random.normal(scale = np.sqrt(noise_power), size = time.shape)\n\n"\
        "f, Pxx_den = signal.welch(x, fs, nperseg= 1024)\nplt.semilogy(f, Px"\
        "x_den)\nplt.ylim([0.5e-3, 1])\nplt.xlabel('freqs')\nplt.ylabel('PSD"\
        "')\nplt.show()\n",
        "import numpy as np\nfrom scipy import signal\nimport matplotlib.pyp"\
        "lot as plt\nnp.random.seed(1234)\n\nfs = 10e3\nN = 1e5\namp = 2 * n"\
        "p.sqrt(2)\nfreq = 1234.0\nnoise_power = 0.001 * fs / 2\ntime = np.a"\
        "range(N) / fs\nx = amp * np.sin(2 * np.pi * freq * time)\nx += np.r"\
        "andom.normal(scale = np.sqrt(noise_power), size = time.shape)\n\nf,"\
        " Pxx_den = signal.welch(x, fs, nperseg= 1024)\nplt.semilogy(f, Pxx_"\
        "den)\nplt.ylim([0.5e-3, 1])\nplt.xlabel('freqs')\nplt.ylabel('PSD')"\
        "\nplt.show()\n",
        'import pyEEG\n',
        'data\n',
        'type(data)\n',
        'data.shape\n',
        'smaller_data = data[:, 0:30000]\n',
        'smaller_data.shape\n',
        'import pickle as pkl\n',
        "numpy.save('sample_eeg.dat', smaller_data)\n",
        "np.save('sample_eeg.dat', smaller_data)\n"]},
                       'launch-id': None,
                       'sel-line': 205L,
                       'sel-line-start': 7421L,
                       'selection_end': 7421L,
                       'selection_start': 7421L,
                       'zoom': 0L}),
                     ('bookmarks',
                      'wide',
                      1,
                      {}),
                     ('messages',
                      'wide',
                      2,
                      {'current-domain': 0}),
                     ('os-command',
                      'wide',
                      1,
                      {'last-percent': 0.8,
                       'toolbox-percent': 1.0,
                       'toolbox-tree-sel': 'cmd-t243o40ayMK8zxfc'})],
        'primary_view_state': {'editor_states': ({'bookmarks': ([[loc('analysis_script.py'),
        {'attrib-starts': [],
         'first-line': 5L,
         'folded-linenos': [],
         'sel-line': 27L,
         'sel-line-start': 717L,
         'selection_end': 764L,
         'selection_start': 717L,
         'zoom': 1L},
        1555499228.167],
        [loc('arduino_parser.py'),
         {'attrib-starts': [],
          'first-line': 0L,
          'folded-linenos': [],
          'sel-line': 3L,
          'sel-line-start': 34L,
          'selection_end': 72L,
          'selection_start': 72L,
          'zoom': 0L},
         1555499229.62],
        [loc('analysis_script.py'),
         {'attrib-starts': [],
          'first-line': 5L,
          'folded-linenos': [],
          'sel-line': 25L,
          'sel-line-start': 691L,
          'selection_end': 762L,
          'selection_start': 691L,
          'zoom': 1L},
         1555499234.215],
        [loc('../../Anaconda3/Lib/site-packages/scipy/io/matlab/mio.py'),
         {'attrib-starts': [('mat_reader_factory',
                             43)],
          'first-line': 6L,
          'folded-linenos': [],
          'sel-line': 70L,
          'sel-line-start': 2055L,
          'selection_end': 2055L,
          'selection_start': 2055L,
          'zoom': 0L},
         1555499280.058],
        [loc('EEG_parser.py'),
         {'attrib-starts': [('parse_matlab_file',
                             14)],
          'first-line': 0L,
          'folded-linenos': [],
          'sel-line': 18L,
          'sel-line-start': 515L,
          'selection_end': 538L,
          'selection_start': 538L,
          'zoom': 0L},
         1555499384.866],
        [loc('analysis_script.py'),
         {'attrib-starts': [],
          'first-line': 5L,
          'folded-linenos': [],
          'sel-line': 25L,
          'sel-line-start': 691L,
          'selection_end': 762L,
          'selection_start': 691L,
          'zoom': 1L},
         1555499395.547],
        [loc('EEG_parser.py'),
         {'attrib-starts': [('parse_matlab_file',
                             14)],
          'first-line': 0L,
          'folded-linenos': [],
          'sel-line': 15L,
          'sel-line-start': 433L,
          'selection_end': 460L,
          'selection_start': 460L,
          'zoom': 0L},
         1555499405.239],
        [loc('analysis_script.py'),
         {'attrib-starts': [],
          'first-line': 5L,
          'folded-linenos': [],
          'sel-line': 25L,
          'sel-line-start': 691L,
          'selection_end': 762L,
          'selection_start': 691L,
          'zoom': 1L},
         1555499464.92],
        [loc('EEG_parser.py'),
         {'attrib-starts': [('parse_matlab_file',
                             15)],
          'first-line': 0L,
          'folded-linenos': [],
          'sel-line': 16L,
          'sel-line-start': 474L,
          'selection_end': 475L,
          'selection_start': 475L,
          'zoom': 0L},
         1555499615.039],
        [loc('analysis_script.py'),
         {'attrib-starts': [],
          'first-line': 16L,
          'folded-linenos': [],
          'sel-line': 34L,
          'sel-line-start': 1051L,
          'selection_end': 1066L,
          'selection_start': 1066L,
          'zoom': 1L},
         1555499737.07],
        [loc('EEG_parser.py'),
         {'attrib-starts': [('parse_matlab_file',
                             15)],
          'first-line': 0L,
          'folded-linenos': [],
          'sel-line': 22L,
          'sel-line-start': 752L,
          'selection_end': 756L,
          'selection_start': 756L,
          'zoom': 0L},
         1555499877.545],
        [loc('arduino_parser.py'),
         {'attrib-starts': [],
          'first-line': 0L,
          'folded-linenos': [],
          'sel-line': 3L,
          'sel-line-start': 34L,
          'selection_end': 67L,
          'selection_start': 67L,
          'zoom': 0L},
         1555499908.099],
        [loc('EEG_parser.py'),
         {'attrib-starts': [('parse_matlab_file',
                             15)],
          'first-line': 0L,
          'folded-linenos': [],
          'sel-line': 24L,
          'sel-line-start': 762L,
          'selection_end': 766L,
          'selection_start': 766L,
          'zoom': 0L},
         1555502633.654],
        [loc('README.md'),
         {'attrib-starts': [],
          'first-line': 0L,
          'folded-linenos': [],
          'sel-line': 9L,
          'sel-line-start': 335L,
          'selection_end': 390L,
          'selection_start': 390L,
          'zoom': 0L},
         1555502634.911],
        [loc('../../Anaconda3/Lib/site-packages/scipy/io/matlab/mio.py'),
         {'attrib-starts': [('mat_reader_factory',
                             43)],
          'first-line': 6L,
          'folded-linenos': [],
          'sel-line': 70L,
          'sel-line-start': 2055L,
          'selection_end': 2055L,
          'selection_start': 2055L,
          'zoom': 0L},
         1555502638.556],
        [loc('README.md'),
         {'attrib-starts': [],
          'first-line': 0L,
          'folded-linenos': [],
          'sel-line': 5L,
          'sel-line-start': 292L,
          'selection_end': 333L,
          'selection_start': 333L,
          'zoom': 0L},
         1555502860.003],
        [loc('unknown:untitled-1.py'),
         {'attrib-starts': [],
          'first-line': 0L,
          'folded-linenos': [],
          'sel-line': 1L,
          'sel-line-start': 20L,
          'selection_end': 35L,
          'selection_start': 35L,
          'zoom': 0L},
         1555503123.126],
        [loc('unknown:untitled-1.py'),
         {'attrib-starts': [],
          'first-line': 0L,
          'folded-linenos': [],
          'sel-line': 20L,
          'sel-line-start': 483L,
          'selection_end': 483L,
          'selection_start': 483L,
          'zoom': 0L},
         1555505054.604],
        [loc('README.md'),
         {'attrib-starts': [],
          'first-line': 9L,
          'folded-linenos': [],
          'sel-line': 7L,
          'sel-line-start': 344L,
          'selection_end': 365L,
          'selection_start': 365L,
          'zoom': 0L},
         1555505572.815],
        [loc('unknown:untitled-1.py'),
         {'attrib-starts': [],
          'first-line': 0L,
          'folded-linenos': [],
          'sel-line': 0L,
          'sel-line-start': 0L,
          'selection_end': 0L,
          'selection_start': 0L,
          'zoom': 0L},
         1555505693.081]],
        20),
        'current-loc': loc('EEG_parser.py'),
        'editor-state-list': [(loc('analysis_script.py'),
                               {'attrib-starts': [],
                                'first-line': 16L,
                                'folded-linenos': [],
                                'sel-line': 34L,
                                'sel-line-start': 1051L,
                                'selection_end': 1066L,
                                'selection_start': 1066L,
                                'zoom': 1L}),
                              (loc('arduino_parser.py'),
                               {'attrib-starts': [],
                                'first-line': 0L,
                                'folded-linenos': [],
                                'sel-line': 3L,
                                'sel-line-start': 34L,
                                'selection_end': 67L,
                                'selection_start': 67L,
                                'zoom': 0L}),
                              (loc('EEG_parser.py'),
                               {'attrib-starts': [('parse_matlab_file',
        15)],
                                'first-line': 0L,
                                'folded-linenos': [],
                                'sel-line': 24L,
                                'sel-line-start': 762L,
                                'selection_end': 766L,
                                'selection_start': 766L,
                                'zoom': 0L})],
        'has-focus': True,
        'locked': False},
        [loc('analysis_script.py'),
         loc('arduino_parser.py'),
         loc('EEG_parser.py')]),
                               'open_files': [u'analysis_script.py',
        u'arduino_parser.py',
        u'EEG_parser.py']},
        'saved_notebook_display': None,
        'split_percents': {0: 0.38013937282229965},
        'splits': 2,
        'tab_location': 'top',
        'user_data': {}},
                 'saved_notebook_display': None,
                 'split_percents': {0: 0.5},
                 'splits': 2,
                 'tab_location': 'left',
                 'user_data': {}},
        'window-alloc': (-17,
                         328,
                         3860,
                         2119)}]}
guimgr.recent-documents = [loc('EEG_parser.py'),
                           loc('arduino_parser.py'),
                           loc('analysis_script.py')]
guimgr.visual-state = {loc('../../Anaconda3/Lib/site-packages/pandas/core/generic.py'): {'a'\
        'ttrib-starts': [('NDFrame',
                          100),
                         ('NDFrame._get_item_cache',
                          2480)],
        'first-line': 2478L,
        'folded-linenos': [],
        'sel-line': 2483L,
        'sel-line-start': 87781L,
        'selection_end': 87781L,
        'selection_start': 87781L,
        'zoom': 0L},
                       loc('../../Anaconda3/Lib/site-packages/scipy/io/matlab/mio.py'): {'a'\
        'ttrib-starts': [('mat_reader_factory',
                          43)],
        'first-line': 6L,
        'folded-linenos': [],
        'sel-line': 70L,
        'sel-line-start': 2055L,
        'selection_end': 2055L,
        'selection_start': 2055L,
        'zoom': 0L},
                       loc('EEG_parser.py'): {'attrib-starts': [('parse_matl'\
        'ab_file',
        10)],
        'first-line': 0L,
        'folded-linenos': [],
        'sel-line': 11L,
        'sel-line-start': 364L,
        'selection_end': 404L,
        'selection_start': 404L,
        'zoom': 0L},
                       loc('README.md'): {'attrib-starts': [],
        'first-line': 0L,
        'folded-linenos': [],
        'sel-line': 9L,
        'sel-line-start': 335L,
        'selection_end': 390L,
        'selection_start': 390L,
        'zoom': 0L},
                       loc('analysis_script.py'): {'attrib-starts': [],
        'first-line': 5L,
        'folded-linenos': [],
        'sel-line': 27L,
        'sel-line-start': 717L,
        'selection_end': 764L,
        'selection_start': 717L,
        'zoom': 1L},
                       loc('arduino_parser.py'): {'attrib-starts': [],
        'first-line': 0L,
        'folded-linenos': [],
        'sel-line': 3L,
        'sel-line-start': 34L,
        'selection_end': 72L,
        'selection_start': 72L,
        'zoom': 0L},
                       loc('bitalino_parser.py'): {'attrib-starts': [('parse'\
        '_bitalino_directory',
        10)],
        'first-line': 0L,
        'folded-linenos': [],
        'sel-line': 21L,
        'sel-line-start': 800L,
        'selection_end': 866L,
        'selection_start': 866L,
        'zoom': 0L},
                       loc('opensignals_reader.py'): {'attrib-starts': [('Op'\
        'enSignalsFileReader',
        20)],
        'first-line': 9L,
        'folded-linenos': [],
        'sel-line': 66L,
        'sel-line-start': 1245L,
        'selection_end': 1245L,
        'selection_start': 1245L,
        'zoom': 0L},
                       loc('../python-opensignals-file-reader/opensignalsfilereader.py'): {'a'\
        'ttrib-starts': [],
        'first-line': 50L,
        'folded-linenos': [],
        'sel-line': 64L,
        'sel-line-start': 1159L,
        'selection_end': 1448L,
        'selection_start': 1159L,
        'zoom': 0L}}
proj.pyexec = {None: ('custom',
                      u'c:\\Users\\ilkka\\Anaconda3\\envs\\ml\\python.exe')}
testing.stored-results = (1,
                          [],
                          {})
versioncontrol.git.remote-history = ['git@github.com:BasalGanglia/booth_anal'\
                                     'ysis.git']
