#!wing
#!version=6.0
##################################################################
# Wing IDE project file : User-specific branch                   #
##################################################################
[user attributes]
debug.breakpoints = {loc('EEG_parser.py'): {41L: (0,
        None,
        1,
        0)}}
debug.err-values = {None: {}}
guimgr.overall-gui-state = {'windowing-policy': 'combined-window',
                            'windows': [{'name': 'QZfaVazMN6F17Nd18ha3Psrntc'\
        'zvnm91',
        'size-state': 'maximized',
        'type': 'dock',
        'view': {'area': 'tall',
                 'constraint': None,
                 'current_pages': [0,
                                   0],
                 'full-screen': False,
                 'notebook_display': 'normal',
                 'notebook_percent': 0.25,
                 'override_title': None,
                 'pagelist': [('project',
                               'tall',
                               0,
                               {'tree-state': {'file-sort-method': 'by name',
        'list-files-first': False,
        'tree-states': {'deep': {'expanded-nodes': [],
                                 'selected-nodes': [(3,)],
                                 'top-node': (0,)}},
        'tree-style': 'deep'}}),
                              ('browser',
                               'tall',
                               0,
                               {'all_tree_states': {loc('../../Anaconda3/Lib/site-packages/sklearn/linear_model/base.py'): {'e'\
        'xpanded-nodes': [],
        'selected-nodes': [],
        'top-node': [('function def',
                      loc('../../Anaconda3/Lib/site-packages/sklearn/linear_model/base.py'),
                      'center_data')]},
        loc('../../Anaconda3/Lib/socket.py'): {'expanded-nodes': [],
        'selected-nodes': [],
        'top-node': [('function def',
                      loc('../../Anaconda3/Lib/socket.py'),
                      'create_connection')]},
        loc('../../Anaconda3/envs/twisted/Lib/site-packages/twisted/web/http.py'): {'e'\
        'xpanded-nodes': [],
        'selected-nodes': [],
        'top-node': [('generic attribute',
                      loc('../../Anaconda3/envs/twisted/Lib/site-packages/twisted/web/http.py'),
                      'CACHED')]},
        loc('../../Anaconda3/lib/site-packages/sklearn/base.py'): {'expanded'\
        '-nodes': [],
        'selected-nodes': [],
        'top-node': [('class def',
                      loc('../../Anaconda3/lib/site-packages/sklearn/base.py'),
                      'BaseEstimator')]},
        loc('../../Anaconda3/lib/site-packages/sklearn/utils/validation.py'): {'e'\
        'xpanded-nodes': [],
        'selected-nodes': [],
        'top-node': [('function def',
                      loc('../../Anaconda3/lib/site-packages/sklearn/utils/validation.py'),
                      'assert_all_finite')]},
        loc('../handson-ml/my_version.py'): {'expanded-nodes': [],
        'selected-nodes': [[('generic attribute',
                             loc('../handson-ml/my_version.py'),
                             'CHAPTER_ID')]],
        'top-node': [('generic attribute',
                      loc('../handson-ml/my_version.py'),
                      'CHAPTER_ID')]},
        loc('../myhandson/myscript.py'): {'expanded-nodes': [],
        'selected-nodes': [],
        'top-node': [('generic attribute',
                      loc('../myhandson/myscript.py'),
                      'abba')]},
        loc('../sod_empatica/final_empatica.py'): {'expanded-nodes': [],
        'selected-nodes': [[('generic attribute',
                             loc('../sod_empatica/final_empatica.py'),
                             'the_logger')]],
        'top-node': [('generic attribute',
                      loc('../sod_empatica/final_empatica.py'),
                      'args')]},
        loc('../twisted_book/dynamic_content.py'): {'expanded-nodes': [],
        'selected-nodes': [],
        'top-node': None},
        loc('../twisted_book/echoclient.py'): {'expanded-nodes': [],
        'selected-nodes': [],
        'top-node': [('class def',
                      loc('../twisted_book/echoclient.py'),
                      'EchoClient')]},
        loc('../twisted_book/echoserver.py'): {'expanded-nodes': [],
        'selected-nodes': [],
        'top-node': [('class def',
                      loc('../twisted_book/echoserver.py'),
                      'Echo')]},
        loc('../twisted_book/headlineRetriever.py'): {'expanded-nodes': [],
        'selected-nodes': [],
        'top-node': [('generic attribute',
                      loc('../twisted_book/headlineRetriever.py'),
                      'd')]},
        loc('../twisted_book/print_resource.py'): {'expanded-nodes': [],
        'selected-nodes': [],
        'top-node': [('generic attribute',
                      loc('../twisted_book/print_resource.py'),
                      'd')]},
        loc('../twisted_book/quoteserver.py'): {'expanded-nodes': [],
        'selected-nodes': [],
        'top-node': None},
        loc('../twisted_book/static_content.py'): {'expanded-nodes': [],
        'selected-nodes': [],
        'top-node': [('generic attribute',
                      loc('../twisted_book/static_content.py'),
                      'factory')]},
        loc('unknown:<untitled> #1'): {'expanded-nodes': [],
                                       'selected-nodes': [],
                                       'top-node': None},
        loc('unknown:<untitled> #2'): {'expanded-nodes': [],
                                       'selected-nodes': [None],
                                       'top-node': None}},
                                'browse_mode': u'Current Module',
                                'follow-selection': False,
                                'sort_mode': 'Alphabetically',
                                'visibility_options': {u'Derived Classes': False,
        u'Imported': False,
        u'Modules': True}}),
                              ('snippets',
                               'tall',
                               0,
                               {'tree-states': {'__all__': [],
        u'c': [],
        u'django': [],
        u'html': [],
        u'py': []}}),
                              ('source-assistant',
                               'tall',
                               2,
                               {}),
                              ('debug-stack',
                               'tall',
                               1,
                               {'codeline-mode': 'below'}),
                              ('indent',
                               'tall',
                               2,
                               {})],
                 'primary_view_state': {'area': 'wide',
        'constraint': None,
        'current_pages': [0,
                          4],
        'notebook_display': 'normal',
        'notebook_percent': 0.2612660944206009,
        'override_title': None,
        'pagelist': [('batch-search',
                      'wide',
                      0,
                      {'fScope': {'fFileSetName': 'All Source Files',
                                  'fLocation': None,
                                  'fRecursive': True,
                                  'fType': 'project-files'},
                       'fSearchSpec': {'fEndPos': None,
                                       'fIncludeLinenos': True,
                                       'fInterpretBackslashes': False,
                                       'fMatchCase': False,
                                       'fOmitBinary': True,
                                       'fRegexFlags': 42,
                                       'fReplaceText': '',
                                       'fReverse': False,
                                       'fSearchText': '',
                                       'fStartPos': 0,
                                       'fStyle': 'text',
                                       'fWholeWords': False,
                                       'fWrap': True},
                       'fUIOptions': {'fAutoBackground': True,
                                      'fFilePrefix': 'short-file',
                                      'fFindAfterReplace': True,
                                      'fInSelection': False,
                                      'fIncremental': True,
                                      'fReplaceOnDisk': False,
                                      'fShowFirstMatch': False,
                                      'fShowLineno': True,
                                      'fShowReplaceWidgets': True},
                       'replace-entry-expanded': False,
                       'search-entry-expanded': False}),
                     ('interactive-search',
                      'wide',
                      0,
                      {'fScope': {'fFileSetName': 'All Source Files',
                                  'fLocation': None,
                                  'fRecursive': True,
                                  'fType': 'project-files'},
                       'fSearchSpec': {'fEndPos': None,
                                       'fIncludeLinenos': True,
                                       'fInterpretBackslashes': False,
                                       'fMatchCase': False,
                                       'fOmitBinary': True,
                                       'fRegexFlags': 42,
                                       'fReplaceText': u'x',
                                       'fReverse': False,
                                       'fSearchText': u'muf',
                                       'fStartPos': 0,
                                       'fStyle': 'text',
                                       'fWholeWords': False,
                                       'fWrap': True},
                       'fUIOptions': {'fAutoBackground': True,
                                      'fFilePrefix': 'short-file',
                                      'fFindAfterReplace': True,
                                      'fInSelection': False,
                                      'fIncremental': True,
                                      'fReplaceOnDisk': False,
                                      'fShowFirstMatch': False,
                                      'fShowLineno': True,
                                      'fShowReplaceWidgets': True}}),
                     ('debug-data',
                      'wide',
                      0,
                      {}),
                     ('debug-exceptions',
                      'wide',
                      0,
                      {}),
                     ('debug-breakpoints',
                      'wide',
                      0,
                      {'tree-state': []}),
                     ('testing',
                      'wide',
                      0,
                      {'added-files': [],
                       'filter': u'',
                       'recent-filters': None,
                       'sort-order': 'alpha',
                       'tree-state': {'expanded-nodes': [],
                                      'selected-nodes': [],
                                      'top-node': (0,)}}),
                     ('versioncontrol.git',
                      'wide',
                      0,
                      {}),
                     ('debug-io',
                      'wide',
                      1,
                      {}),
                     ('debug-probe',
                      'wide',
                      2,
                      {'active-range': (None,
        -1,
        -1),
                       'attrib-starts': [],
                       'first-line': 438L,
                       'folded-linenos': [],
                       'history': {u'file:c:/Users/ilkka/code/booth_analysis/analysis_script.py': ['a'\
        'vatar_data\n',
        'avatar_data.dropna()\n',
        'avatar_data.dropna(inplace = True)\n',
        'EEG.shape\n',
        'tehtime.shape\n',
        'thetime\n',
        'EEG.head()\n',
        'start_time\n',
        'eeg_data\n',
        'eeg_data.iloc[0, 0]\n',
        'eeg_data.iloc[1, 0]\n',
        'eeg_data.shape\n',
        'eeg_data.iloc[0, :]\n',
        'tehtime\n']},
                       'launch-id': None,
                       'sel-line': 462L,
                       'sel-line-start': 12885L,
                       'selection_end': 12885L,
                       'selection_start': 12885L,
                       'zoom': 0L}),
                     ('debug-watch',
                      'wide',
                      1,
                      {'node-states': [],
                       'tree-state': {'expanded-nodes': [],
                                      'selected-nodes': [],
                                      'top-node': (0,)}}),
                     ('debug-modules',
                      'wide',
                      1,
                      {}),
                     ('python-shell',
                      'wide',
                      2,
                      {'active-range': (None,
        -1,
        -1),
                       'attrib-starts': [],
                       'first-line': 818L,
                       'folded-linenos': [],
                       'history': {None: ['pt_data \n',
        'imp.reload(psychopy_parser)\npsychopy_data = psychopy_parser.parse_'\
        'psychopy_directory(PSYCHOPY_DIR)\n',
        'imp.reload(EEG_parser)\nmuf = EEG_parser.parse_eeg_directory(EEG_DI'\
        'R)\n\n',
        'imp.reload(EEG_parser)\neeg_times, eeg_data = EEG_parser.parse_eeg_'\
        'directory(EEG_DIR)\n\n',
        'eeg_tiems\n',
        'eeg_times\n',
        'eeg_times.shape[0]\n',
        'eeg_times[0]\n',
        'eeg_times[1]\n',
        'type(eeg_data)\n',
        'import numpy as np\n\n',
        'imp.reload(EEG_parser)\neeg_data = EEG_parser.parse_eeg_directory(E'\
        'EG_DIR)\n\n',
        'eeg_times.shape\n',
        'eeg_data[0]\n',
        'muf[-6:, 1]\n',
        "datsun = mat_contents['y']\n",
        "datsun = muf['y']\n",
        'datsun\n',
        'dpoints = datsun[6:, :]\n',
        'dpoints[0]\n',
        'dpoints.shape\n',
        'datsun[0]\n',
        'datsun.shape\n',
        'datsun[-6:1]\n',
        'datsun[-6:, 1]\n',
        'datsun[6:, 1]\n',
        'datsun[:, 1]\n',
        'datsun[:-6, 100]\n',
        'datsun[:-7, 1]\n',
        'datsun[:-8, 1]\n',
        'datsun[:-9, 1]\n',
        'datsun[:-1, 1]\n',
        'datsun[:-2, 1]\n',
        'datsun[:-5, 1]\n',
        'datsun[:-6, 1]\n',
        'muf[0, :]\n',
        'muf[1, :]\n',
        'import datetime\n',
        'datetime\n',
        'datetime.datetime(muf[0, 0], muf[0, 1], muf[0, 2], muf[0, 3], muf[0'\
        ', 4])\n',
        'muf[0, 0]\n',
        'datetime.datetime(int(muf[0, 0] ), int(muf[0, 1] ), int(muf[0, 2] )'\
        ', int(muf[0, 3] ), int(muf[0, 4]))\n',
        'timy = datetime.datetime(int(muf[0, 0] ), int(muf[0, 1] ), int(muf['\
        '0, 2] ), int(muf[0, 3] ), int(muf[0, 4]))\n',
        'timy.str()\n',
        'timy.strftime\n',
        'timy.strftime()\n',
        'timy.fromtimestamp()\n',
        'TimeoutError\n',
        'timy\n',
        'timy = datetime.datetime(int(muf[0, 0] ), int(muf[0, 1] ), int(muf['\
        '0, 2] ), int(muf[0, 3] ), int(muf[0, 4]), int(muf[0, 5]))\n',
        'timy.timestamp()\n',
        'uh = muf[0, :]\n',
        'uh\n',
        'uh[0]\n',
        'imp.reload(EEG_parser)\n# eeg_data = EEG_parser.parse_eeg_directory'\
        '(EEG_DIR)\nmuf = EEG_parser.parse_eeg_directory(EEG_DIR)\n',
        'muf\n',
        'type(muf)\n',
        'muf.head()\n',
        'muf[0]\n',
        'muf[0].timestamp()\n',
        'imp.reload(EEG_parser)\n# eeg_data = EEG_parser.parse_eeg_directory'\
        '(EEG_DIR)\nmuf2 = EEG_parser.parse_eeg_directory(EEG_DIR)\n',
        'psychopy_data\n',
        'psychopy_data[0]\n',
        'psychopy_data.iloc[0]\n',
        "psychopy_data['startav']\n",
        'psychopy_data.columns\n',
        '\nimp.reload(psychopy_parser)\npsychopy_data = psychopy_parser.pars'\
        'e_psychopy_directory(PSYCHOPY_DIR)\n',
        "bit_date = datetime.datetime.strptime(bitalino_data.bitalino_header"\
        ".timestamp, '%H:%M:%S.%f')\nbit_date = bit_date.replace(year = psy_"\
        "date.year)\nbit_date = bit_date.replace(month = psy_date.month)\nbi"\
        "t_date = bit_date.replace(day = psy_date.day)\narduino_time = datet"\
        "ime.datetime.utcfromtimestamp(arduino_data['Time'].iloc[0]).strftim"\
        "e('%Y-%m-%d %H:%M:%S')\narduino_date = datetime.datetime.strptime(a"\
        "rduino_time, '%Y-%m-%d %H:%M:%S')\n\neeg_date = datetime.datetime(i"\
        "nt(eeg_data.iloc[0, 0]), int(eeg_data.iloc[1, 0]) , int(eeg_data.il"\
        "oc[2, 0]), int(eeg_data.iloc[3, 0]), int(eeg_data.iloc[4, 0]), int("\
        "eeg_data.iloc[5, 0]))\n",
        'bitalino_data.head()\n',
        'arduino_data.head()\n',
        'psychopy_data.head()\n',
        'eeg_date\n',
        'eeg_data.iloc(:, 5)\n',
        'eeg_data.iloc[:, 5]\n',
        'imp.reload(EEG_parser)\neeg_data = EEG_parser.parse_eeg_directory(E'\
        'EG_DIR)\n',
        'arduino_data.shape\n',
        'eeg_data.iloc[1, :]\n',
        'eeg_data.iloc[100, :]\n',
        'eeg_data.iloc[1009, :]\n',
        'eeg_data.iloc[10090, :]\n',
        '\nimp.reload(EEG_parser)\neeg_data = EEG_parser.parse_eeg_directory'\
        '(EEG_DIR, psy_date)\n#muf2 = EEG_parser.parse_eeg_directory(EEG_DIR'\
        ')\n',
        'eeg_data.iloc[1:10, :]\n',
        'eh = eeg_data.T\n',
        'eh.tail()\n',
        'eh\n',
        'eeg_data.columns\n',
        "eeg_data['timestamp']\n",
        'eeg_data.shape\n',
        '\nimp.reload(EEG_parser)\neeg_data = EEG_parser.parse_eeg_directory'\
        '(EEG_DIR, psy_date)\n',
        'eeg_data.head()\n',
        'eeg_data.tail()\n',
        'eeg_data.iloc[-1, :]\n',
        'eeg_data.iloc[1:5, :]\n',
        'eeg_data.iloc[1:5, 6]\n',
        'eeg_data.iloc[1:50, 5:6]\n',
        'eeg_data.iloc[1:50, 6]\n',
        "eeg_data.iloc[1:50, 'timestamp']\n",
        'eeg_data.head(9)\n',
        'eeg_data.head(100)\n',
        'eeg_data.head(1000)\n']},
                       'launch-id': None,
                       'sel-line': 822L,
                       'sel-line-start': 38757L,
                       'selection_end': 38821L,
                       'selection_start': 38813L,
                       'zoom': 0L}),
                     ('bookmarks',
                      'wide',
                      1,
                      {}),
                     ('messages',
                      'wide',
                      2,
                      {'current-domain': 0}),
                     ('os-command',
                      'wide',
                      1,
                      {'last-percent': 0.8,
                       'toolbox-percent': 1.0,
                       'toolbox-tree-sel': 'cmd-t243o40ayMK8zxfc'})],
        'primary_view_state': {'editor_states': ({'bookmarks': ([[loc('analysis_script.py'),
        {'attrib-starts': [],
         'first-line': 18L,
         'folded-linenos': [],
         'sel-line': 32L,
         'sel-line-start': 972L,
         'selection_end': 1056L,
         'selection_start': 972L,
         'zoom': 4L},
        1563352860.974],
        [loc('EEG_parser.py'),
         {'attrib-starts': [('parse_matlab_file',
                             15),
                            ('parse_matlab_file.my_funky',
                             37)],
          'first-line': 21L,
          'folded-linenos': [],
          'sel-line': 39L,
          'sel-line-start': 1778L,
          'selection_end': 1830L,
          'selection_start': 1830L,
          'zoom': 0L},
         1563352867.627],
        [loc('analysis_script.py'),
         {'attrib-starts': [],
          'first-line': 18L,
          'folded-linenos': [],
          'sel-line': 32L,
          'sel-line-start': 972L,
          'selection_end': 1056L,
          'selection_start': 972L,
          'zoom': 4L},
         1563352872.078],
        [loc('EEG_parser.py'),
         {'attrib-starts': [('parse_matlab_file',
                             15)],
          'first-line': 21L,
          'folded-linenos': [],
          'sel-line': 31L,
          'sel-line-start': 1194L,
          'selection_end': 1230L,
          'selection_start': 1230L,
          'zoom': 0L},
         1563352918.697],
        [loc('analysis_script.py'),
         {'attrib-starts': [],
          'first-line': 18L,
          'folded-linenos': [],
          'sel-line': 32L,
          'sel-line-start': 972L,
          'selection_end': 1056L,
          'selection_start': 972L,
          'zoom': 4L},
         1563352922.746],
        [loc('EEG_parser.py'),
         {'attrib-starts': [('parse_matlab_file',
                             15)],
          'first-line': 21L,
          'folded-linenos': [],
          'sel-line': 32L,
          'sel-line-start': 1233L,
          'selection_end': 1419L,
          'selection_start': 1419L,
          'zoom': 0L},
         1563352971.611],
        [loc('analysis_script.py'),
         {'attrib-starts': [],
          'first-line': 18L,
          'folded-linenos': [],
          'sel-line': 32L,
          'sel-line-start': 972L,
          'selection_end': 1056L,
          'selection_start': 972L,
          'zoom': 4L},
         1563352975.825],
        [loc('EEG_parser.py'),
         {'attrib-starts': [('parse_matlab_file',
                             15)],
          'first-line': 21L,
          'folded-linenos': [],
          'sel-line': 44L,
          'sel-line-start': 1957L,
          'selection_end': 2018L,
          'selection_start': 2018L,
          'zoom': 0L},
         1563353001.83],
        [loc('EEG_parser.py'),
         {'attrib-starts': [('parse_matlab_file',
                             15)],
          'first-line': 21L,
          'folded-linenos': [],
          'sel-line': 44L,
          'sel-line-start': 1957L,
          'selection_end': 2019L,
          'selection_start': 2019L,
          'zoom': 0L},
         1563353004.724],
        [loc('analysis_script.py'),
         {'attrib-starts': [],
          'first-line': 18L,
          'folded-linenos': [],
          'sel-line': 32L,
          'sel-line-start': 972L,
          'selection_end': 1056L,
          'selection_start': 972L,
          'zoom': 4L},
         1563353009.936],
        [loc('EEG_parser.py'),
         {'attrib-starts': [('parse_matlab_file',
                             15),
                            ('parse_matlab_file.my_funky',
                             37)],
          'first-line': 21L,
          'folded-linenos': [],
          'sel-line': 40L,
          'sel-line-start': 1858L,
          'selection_end': 1937L,
          'selection_start': 1937L,
          'zoom': 0L},
         1563353191.234],
        [loc('analysis_script.py'),
         {'attrib-starts': [],
          'first-line': 18L,
          'folded-linenos': [],
          'sel-line': 32L,
          'sel-line-start': 972L,
          'selection_end': 1056L,
          'selection_start': 972L,
          'zoom': 4L},
         1563353192.488],
        [loc('EEG_parser.py'),
         {'attrib-starts': [('parse_matlab_file',
                             15),
                            ('parse_matlab_file.my_funky',
                             37)],
          'first-line': 21L,
          'folded-linenos': [],
          'sel-line': 41L,
          'sel-line-start': 2039L,
          'selection_end': 2138L,
          'selection_start': 2138L,
          'zoom': 0L},
         1563353261.164],
        [loc('analysis_script.py'),
         {'attrib-starts': [],
          'first-line': 18L,
          'folded-linenos': [],
          'sel-line': 32L,
          'sel-line-start': 972L,
          'selection_end': 1056L,
          'selection_start': 972L,
          'zoom': 4L},
         1563353266.341],
        [loc('EEG_parser.py'),
         {'attrib-starts': [('parse_matlab_file',
                             15),
                            ('parse_matlab_file.my_funky',
                             37)],
          'first-line': 21L,
          'folded-linenos': [],
          'sel-line': 41L,
          'sel-line-start': 2039L,
          'selection_end': 2108L,
          'selection_start': 2108L,
          'zoom': 0L},
         1563353273.634],
        [loc('analysis_script.py'),
         {'attrib-starts': [],
          'first-line': 18L,
          'folded-linenos': [],
          'sel-line': 40L,
          'sel-line-start': 1274L,
          'selection_end': 1310L,
          'selection_start': 1310L,
          'zoom': 4L},
         1563353314.518],
        [loc('EEG_parser.py'),
         {'attrib-starts': [('parse_matlab_file',
                             15),
                            ('parse_matlab_file.my_funky',
                             37)],
          'first-line': 21L,
          'folded-linenos': [],
          'sel-line': 41L,
          'sel-line-start': 2039L,
          'selection_end': 2108L,
          'selection_start': 2108L,
          'zoom': 0L},
         1563353516.61],
        [loc('../../Anaconda3/envs/ml/Lib/site-packages/pandas/core/indexing.py'),
         {'attrib-starts': [('_NDFrameIndexer',
                             87),
                            ('_NDFrameIndexer._has_valid_tuple',
                             215)],
          'first-line': 220L,
          'folded-linenos': [],
          'sel-line': 225L,
          'sel-line-start': 6279L,
          'selection_end': 6279L,
          'selection_start': 6279L,
          'zoom': 0L},
         1563353523.064],
        [loc('analysis_script.py'),
         {'attrib-starts': [],
          'first-line': 18L,
          'folded-linenos': [],
          'sel-line': 40L,
          'sel-line-start': 1274L,
          'selection_end': 1310L,
          'selection_start': 1310L,
          'zoom': 4L},
         1563353628.204],
        [loc('EEG_parser.py'),
         {'attrib-starts': [('parse_matlab_file',
                             15),
                            ('parse_matlab_file.my_funky',
                             37)],
          'first-line': 21L,
          'folded-linenos': [],
          'sel-line': 41L,
          'sel-line-start': 2039L,
          'selection_end': 2108L,
          'selection_start': 2108L,
          'zoom': 0L},
         1563353641.222]],
        20),
        'current-loc': loc('analysis_script.py'),
        'editor-state-list': [(loc('analysis_script.py'),
                               {'attrib-starts': [],
                                'first-line': 18L,
                                'folded-linenos': [],
                                'sel-line': 40L,
                                'sel-line-start': 1274L,
                                'selection_end': 1310L,
                                'selection_start': 1310L,
                                'zoom': 4L}),
                              (loc('bitalino_parser.py'),
                               {'attrib-starts': [('parse_bitalino_file',
        27),
        ('parse_bitalino_file.my_funky',
         61)],
                                'first-line': 40L,
                                'folded-linenos': [],
                                'sel-line': 63L,
                                'sel-line-start': 2816L,
                                'selection_end': 2895L,
                                'selection_start': 2895L,
                                'zoom': 0L}),
                              (loc('EEG_parser.py'),
                               {'attrib-starts': [('parse_matlab_file',
        15),
        ('parse_matlab_file.my_funky',
         37)],
                                'first-line': 21L,
                                'folded-linenos': [],
                                'sel-line': 41L,
                                'sel-line-start': 2039L,
                                'selection_end': 2108L,
                                'selection_start': 2108L,
                                'zoom': 0L}),
                              (loc('../../Anaconda3/envs/ml/Lib/site-packages/pandas/core/indexing.py'),
                               {'attrib-starts': [('_NDFrameIndexer',
        87),
        ('_NDFrameIndexer._has_valid_tuple',
         215)],
                                'first-line': 220L,
                                'folded-linenos': [],
                                'sel-line': 225L,
                                'sel-line-start': 6279L,
                                'selection_end': 6279L,
                                'selection_start': 6279L,
                                'zoom': 0L}),
                              (loc('psychopy_parser.py'),
                               {'attrib-starts': [('parse_psychopy_file',
        23)],
                                'first-line': 21L,
                                'folded-linenos': [],
                                'sel-line': 34L,
                                'sel-line-start': 1231L,
                                'selection_end': 1271L,
                                'selection_start': 1271L,
                                'zoom': 2L})],
        'has-focus': True,
        'locked': False},
        [loc('analysis_script.py'),
         loc('bitalino_parser.py'),
         loc('EEG_parser.py'),
         loc('../../Anaconda3/envs/ml/Lib/site-packages/pandas/core/indexing.py'),
         loc('psychopy_parser.py')]),
                               'open_files': [u'psychopy_parser.py',
        u'bitalino_parser.py',
        u'EEG_parser.py',
        u'analysis_script.py']},
        'saved_notebook_display': None,
        'split_percents': {0: 0.32229965156794427},
        'splits': 2,
        'tab_location': 'top',
        'user_data': {}},
                 'saved_notebook_display': None,
                 'split_percents': {0: 0.5},
                 'splits': 2,
                 'tab_location': 'left',
                 'user_data': {}},
        'window-alloc': (0,
                         -1,
                         3830,
                         2089)}]}
guimgr.recent-documents = [loc('analysis_script.py'),
                           loc('EEG_parser.py'),
                           loc('../../Anaconda3/envs/ml/Lib/site-packages/pandas/core/indexing.py'),
                           loc('bitalino_parser.py'),
                           loc('psychopy_parser.py')]
guimgr.visual-state = {loc('../../Anaconda3/Lib/site-packages/pandas/core/generic.py'): {'a'\
        'ttrib-starts': [('NDFrame',
                          100),
                         ('NDFrame._get_item_cache',
                          2480)],
        'first-line': 2478L,
        'folded-linenos': [],
        'sel-line': 2483L,
        'sel-line-start': 87781L,
        'selection_end': 87781L,
        'selection_start': 87781L,
        'zoom': 0L},
                       loc('../../Anaconda3/Lib/site-packages/scipy/io/matlab/mio.py'): {'a'\
        'ttrib-starts': [('mat_reader_factory',
                          43)],
        'first-line': 6L,
        'folded-linenos': [],
        'sel-line': 70L,
        'sel-line-start': 2055L,
        'selection_end': 2055L,
        'selection_start': 2055L,
        'zoom': 0L},
                       loc('../../Anaconda3/envs/ml/Lib/site-packages/pandas/core/apply.py'): {'a'\
        'ttrib-starts': [('FrameApply',
                          31),
                         ('FrameApply.apply_series_generator',
                          252)],
        'first-line': 249L,
        'folded-linenos': [],
        'sel-line': 276L,
        'sel-line-start': 9078L,
        'selection_end': 9078L,
        'selection_start': 9078L,
        'zoom': 0L},
                       loc('../../Anaconda3/envs/ml/Lib/site-packages/pandas/core/generic.py'): {'a'\
        'ttrib-starts': [('NDFrame',
                          101),
                         ('NDFrame.__getattr__',
                          4361)],
        'first-line': 4364L,
        'folded-linenos': [],
        'sel-line': 4375L,
        'sel-line-start': 150289L,
        'selection_end': 150289L,
        'selection_start': 150289L,
        'zoom': 2L},
                       loc('../../Anaconda3/envs/ml/Lib/site-packages/pandas/core/indexing.py'): {'a'\
        'ttrib-starts': [('_NDFrameIndexer',
                          87),
                         ('_NDFrameIndexer._convert_to_indexer',
                          1224)],
        'first-line': 1307L,
        'folded-linenos': [],
        'sel-line': 1326L,
        'sel-line-start': 48427L,
        'selection_end': 48427L,
        'selection_start': 48427L,
        'zoom': 0L},
                       loc('../../Anaconda3/envs/ml/Lib/site-packages/pandas/core/internals.py'): {'a'\
        'ttrib-starts': [('BlockManager',
                          3209),
                         ('BlockManager.set',
                          4207)],
        'first-line': 4223L,
        'folded-linenos': [],
        'sel-line': 4238L,
        'sel-line-start': 144917L,
        'selection_end': 144917L,
        'selection_start': 144917L,
        'zoom': 0L},
                       loc('EEG_parser.py'): {'attrib-starts': [('parse_matl'\
        'ab_file',
        10)],
        'first-line': 0L,
        'folded-linenos': [],
        'sel-line': 11L,
        'sel-line-start': 364L,
        'selection_end': 404L,
        'selection_start': 404L,
        'zoom': 0L},
                       loc('README.md'): {'attrib-starts': [],
        'first-line': 0L,
        'folded-linenos': [],
        'sel-line': 9L,
        'sel-line-start': 335L,
        'selection_end': 390L,
        'selection_start': 390L,
        'zoom': 0L},
                       loc('analysis_script.py'): {'attrib-starts': [],
        'first-line': 39L,
        'folded-linenos': [],
        'sel-line': 40L,
        'sel-line-start': 1318L,
        'selection_end': 1419L,
        'selection_start': 1318L,
        'zoom': 4L},
                       loc('arduino_parser.py'): {'attrib-starts': [],
        'first-line': 0L,
        'folded-linenos': [],
        'sel-line': 3L,
        'sel-line-start': 34L,
        'selection_end': 72L,
        'selection_start': 72L,
        'zoom': 0L},
                       loc('bitalino_parser.py'): {'attrib-starts': [('parse'\
        '_bitalino_directory',
        10)],
        'first-line': 0L,
        'folded-linenos': [],
        'sel-line': 21L,
        'sel-line-start': 800L,
        'selection_end': 866L,
        'selection_start': 866L,
        'zoom': 0L},
                       loc('opensignals_reader.py'): {'attrib-starts': [('Op'\
        'enSignalsFileReader',
        20)],
        'first-line': 42L,
        'folded-linenos': [],
        'sel-line': 66L,
        'sel-line-start': 1245L,
        'selection_end': 1245L,
        'selection_start': 1245L,
        'zoom': 0L},
                       loc('../python-opensignals-file-reader/opensignalsfilereader.py'): {'a'\
        'ttrib-starts': [],
        'first-line': 50L,
        'folded-linenos': [],
        'sel-line': 64L,
        'sel-line-start': 1159L,
        'selection_end': 1448L,
        'selection_start': 1159L,
        'zoom': 0L}}
proj.pyexec = {None: ('custom',
                      u'c:\\Users\\ilkka\\Anaconda3\\envs\\ml\\python.exe')}
search.search-history = [u'muf']
testing.stored-results = (1,
                          [],
                          {})
versioncontrol.git.remote-history = ['git@github.com:BasalGanglia/booth_anal'\
                                     'ysis.git']
