#!wing
#!version=6.0
##################################################################
# Wing IDE project file : User-specific branch                   #
##################################################################
[user attributes]
debug.breakpoints = {loc('analysis_script.py'): {143L: (0,
        None,
        1,
        0)},
                     loc('fiddling_script.py'): {121L: (0,
        None,
        1,
        0)}}
debug.err-values = {None: {},
                    loc('ECG_analyser.py'): {}}
debug.show-args-dialog = {loc('analysis_script.py'): False,
                          loc('fiddling_script.py'): False}
guimgr.overall-gui-state = {'windowing-policy': 'combined-window',
                            'windows': [{'name': 'QZfaVazMN6F17Nd18ha3Psrntc'\
        'zvnm91',
        'size-state': '',
        'type': 'dock',
        'view': {'area': 'tall',
                 'constraint': None,
                 'current_pages': [0,
                                   0],
                 'full-screen': False,
                 'notebook_display': 'normal',
                 'notebook_percent': 0.3763048016701461,
                 'override_title': None,
                 'pagelist': [('project',
                               'tall',
                               0,
                               {'tree-state': {'file-sort-method': 'by name',
        'list-files-first': False,
        'tree-states': {'deep': {'expanded-nodes': [],
                                 'selected-nodes': [],
                                 'top-node': (0,)}},
        'tree-style': 'deep'}}),
                              ('browser',
                               'tall',
                               0,
                               {'all_tree_states': {loc('../../Anaconda3/Lib/site-packages/sklearn/linear_model/base.py'): {'e'\
        'xpanded-nodes': [],
        'selected-nodes': [],
        'top-node': [('function def',
                      loc('../../Anaconda3/Lib/site-packages/sklearn/linear_model/base.py'),
                      'center_data')]},
        loc('../../Anaconda3/Lib/socket.py'): {'expanded-nodes': [],
        'selected-nodes': [],
        'top-node': [('function def',
                      loc('../../Anaconda3/Lib/socket.py'),
                      'create_connection')]},
        loc('../../Anaconda3/envs/twisted/Lib/site-packages/twisted/web/http.py'): {'e'\
        'xpanded-nodes': [],
        'selected-nodes': [],
        'top-node': [('generic attribute',
                      loc('../../Anaconda3/envs/twisted/Lib/site-packages/twisted/web/http.py'),
                      'CACHED')]},
        loc('../../Anaconda3/lib/site-packages/sklearn/base.py'): {'expanded'\
        '-nodes': [],
        'selected-nodes': [],
        'top-node': [('class def',
                      loc('../../Anaconda3/lib/site-packages/sklearn/base.py'),
                      'BaseEstimator')]},
        loc('../../Anaconda3/lib/site-packages/sklearn/utils/validation.py'): {'e'\
        'xpanded-nodes': [],
        'selected-nodes': [],
        'top-node': [('function def',
                      loc('../../Anaconda3/lib/site-packages/sklearn/utils/validation.py'),
                      'assert_all_finite')]},
        loc('../handson-ml/my_version.py'): {'expanded-nodes': [],
        'selected-nodes': [[('generic attribute',
                             loc('../handson-ml/my_version.py'),
                             'CHAPTER_ID')]],
        'top-node': [('generic attribute',
                      loc('../handson-ml/my_version.py'),
                      'CHAPTER_ID')]},
        loc('../myhandson/myscript.py'): {'expanded-nodes': [],
        'selected-nodes': [],
        'top-node': [('generic attribute',
                      loc('../myhandson/myscript.py'),
                      'abba')]},
        loc('../sod_empatica/final_empatica.py'): {'expanded-nodes': [],
        'selected-nodes': [[('generic attribute',
                             loc('../sod_empatica/final_empatica.py'),
                             'the_logger')]],
        'top-node': [('generic attribute',
                      loc('../sod_empatica/final_empatica.py'),
                      'args')]},
        loc('../twisted_book/dynamic_content.py'): {'expanded-nodes': [],
        'selected-nodes': [],
        'top-node': None},
        loc('../twisted_book/echoclient.py'): {'expanded-nodes': [],
        'selected-nodes': [],
        'top-node': [('class def',
                      loc('../twisted_book/echoclient.py'),
                      'EchoClient')]},
        loc('../twisted_book/echoserver.py'): {'expanded-nodes': [],
        'selected-nodes': [],
        'top-node': [('class def',
                      loc('../twisted_book/echoserver.py'),
                      'Echo')]},
        loc('../twisted_book/headlineRetriever.py'): {'expanded-nodes': [],
        'selected-nodes': [],
        'top-node': [('generic attribute',
                      loc('../twisted_book/headlineRetriever.py'),
                      'd')]},
        loc('../twisted_book/print_resource.py'): {'expanded-nodes': [],
        'selected-nodes': [],
        'top-node': [('generic attribute',
                      loc('../twisted_book/print_resource.py'),
                      'd')]},
        loc('../twisted_book/quoteserver.py'): {'expanded-nodes': [],
        'selected-nodes': [],
        'top-node': None},
        loc('../twisted_book/static_content.py'): {'expanded-nodes': [],
        'selected-nodes': [],
        'top-node': [('generic attribute',
                      loc('../twisted_book/static_content.py'),
                      'factory')]},
        loc('unknown:<untitled> #1'): {'expanded-nodes': [],
                                       'selected-nodes': [None],
                                       'top-node': None},
        loc('unknown:<untitled> #2'): {'expanded-nodes': [],
                                       'selected-nodes': [],
                                       'top-node': None}},
                                'browse_mode': u'Current Module',
                                'follow-selection': False,
                                'sort_mode': 'Alphabetically',
                                'visibility_options': {u'Derived Classes': False,
        u'Imported': False,
        u'Modules': True}}),
                              ('snippets',
                               'tall',
                               0,
                               {'tree-states': {'__all__': [],
        u'c': [],
        u'django': [],
        u'html': [],
        u'py': []}}),
                              ('source-assistant',
                               'tall',
                               2,
                               {}),
                              ('debug-stack',
                               'tall',
                               1,
                               {'codeline-mode': 'below'}),
                              ('indent',
                               'tall',
                               2,
                               {})],
                 'primary_view_state': {'area': 'wide',
        'constraint': None,
        'current_pages': [3,
                          1],
        'notebook_display': 'normal',
        'notebook_percent': 0.3605588393336916,
        'override_title': None,
        'pagelist': [('batch-search',
                      'wide',
                      0,
                      {'fScope': {'fFileSetName': 'All Source Files',
                                  'fLocation': None,
                                  'fRecursive': True,
                                  'fType': 'project-files'},
                       'fSearchSpec': {'fEndPos': None,
                                       'fIncludeLinenos': True,
                                       'fInterpretBackslashes': False,
                                       'fMatchCase': False,
                                       'fOmitBinary': True,
                                       'fRegexFlags': 42,
                                       'fReplaceText': '',
                                       'fReverse': False,
                                       'fSearchText': '',
                                       'fStartPos': 0,
                                       'fStyle': 'text',
                                       'fWholeWords': False,
                                       'fWrap': True},
                       'fUIOptions': {'fAutoBackground': True,
                                      'fFilePrefix': 'short-file',
                                      'fFindAfterReplace': True,
                                      'fInSelection': False,
                                      'fIncremental': True,
                                      'fReplaceOnDisk': False,
                                      'fShowFirstMatch': False,
                                      'fShowLineno': True,
                                      'fShowReplaceWidgets': True},
                       'replace-entry-expanded': False,
                       'search-entry-expanded': False}),
                     ('interactive-search',
                      'wide',
                      0,
                      {'fScope': {'fFileSetName': 'All Source Files',
                                  'fLocation': None,
                                  'fRecursive': True,
                                  'fType': 'project-files'},
                       'fSearchSpec': {'fEndPos': None,
                                       'fIncludeLinenos': True,
                                       'fInterpretBackslashes': False,
                                       'fMatchCase': False,
                                       'fOmitBinary': True,
                                       'fRegexFlags': 42,
                                       'fReplaceText': u'bio',
                                       'fReverse': False,
                                       'fSearchText': u'bio2',
                                       'fStartPos': 0,
                                       'fStyle': 'text',
                                       'fWholeWords': False,
                                       'fWrap': True},
                       'fUIOptions': {'fAutoBackground': True,
                                      'fFilePrefix': 'short-file',
                                      'fFindAfterReplace': True,
                                      'fInSelection': False,
                                      'fIncremental': True,
                                      'fReplaceOnDisk': False,
                                      'fShowFirstMatch': False,
                                      'fShowLineno': True,
                                      'fShowReplaceWidgets': True}}),
                     ('debug-data',
                      'wide',
                      0,
                      {}),
                     ('debug-exceptions',
                      'wide',
                      0,
                      {}),
                     ('debug-breakpoints',
                      'wide',
                      0,
                      {'tree-state': []}),
                     ('testing',
                      'wide',
                      0,
                      {'added-files': [],
                       'filter': u'',
                       'recent-filters': None,
                       'sort-order': 'alpha',
                       'tree-state': {'expanded-nodes': [],
                                      'selected-nodes': [],
                                      'top-node': (0,)}}),
                     ('versioncontrol.git',
                      'wide',
                      0,
                      {}),
                     ('debug-io',
                      'wide',
                      1,
                      {}),
                     ('debug-probe',
                      'wide',
                      2,
                      {'active-range': (None,
        -1,
        -1),
                       'attrib-starts': [],
                       'first-line': 909L,
                       'folded-linenos': [],
                       'history': {None: [],
                                   u'file:c:/Users/ilkka/code/booth_analysis/EEG_analyzer.py': ['b'\
        'and\n',
        'psds\n',
        'np.mean(psds, axis = 1)\n',
        'psds[freq_ix]\n',
        'psds[:, freq_ix]\n',
        'len(psds_mean)\n',
        'len(eeg_bands)\n',
        'len(eeg_bands[band][0])\n',
        'eeg_bands[band][0]\n',
        'eeg_bands[band][1]\n',
        'fft_freq <= eeg_bands[band][1]))\n',
        'fft_freq <= eeg_bands[band][1]\n',
        'len(fft_freq <= eeg_bands[band][1])\n',
        'len(fft_freq >= eeg_bands[band][0])\n',
        'len(fft_freq >= eeg_bands[band][0] & fft_freq <= eeg_bands[band][1]'\
        ')\n',
        'gah =  np.where((fft_freq >= eeg_bands[band][0]) & \n              '\
        '             (fft_freq <= eeg_bands[band][1]))[0]\n\n',
        'gah\n',
        'len(agh\nle\n\n)\n',
        'fft_freq\n',
        'fft_freq[-1]\n',
        'len(fft_freq)\n',
        'len(freq_ix)\n',
        'len(psds)\n',
        'psds.shape()\n',
        'psds.shape\n',
        'freqs_ix\n',
        'eeg_band_fft\n'],
                                   u'file:c:/Users/ilkka/code/booth_analysis/analysis_script.py': ['e'\
        'eg_features = EEG_analyzer(neutral_slice)\n',
        'eeg_features = Analyze_EEG(neutral_slice)\n',
        'eeg_band_fft\n',
        'type(eeg_features\n)\n',
        'type(features)\n',
        'type(features_df)\n',
        'eeg_features.reshape(1, :)\n',
        'eeg_features.reshape(1, )\n',
        'eeg_features.index\n',
        'dung = eeg_features.pivot(index = index)\n',
        'dung = eeg_features.pivot(index = eeg_features.index)\n',
        'eeg_f2 = eeg_features.pivot(index = eeg_features.index, columns = e'\
        'eg_features.columns)\n',
        'eeg_features.pivot(index = eeg_features.index, columns = eeg_featur'\
        'es.columns)\n',
        'eeg_features.pivot(index = 1, columns = eeg_features.columns)\n',
        'eeg_features.pivot( columns = eeg_features.columns)\n',
        "eeg_features['idx'] = 1\n",
        'eeg_features.pivot(index = idxi , columns = eeg_features.columns)\n',
        'eeg_features.pivot(index = idx , columns = eeg_features.columns)\n',
        "eeg_features.pivot(index = 'idx' , columns = eeg_features.columns)"\
        "\n",
        'type(eeg_features)\n',
        'eeg_features.wide_to_long()\n',
        'pd.wide_to_long(eeg_features)\n',
        "eeg_features.set_index(['index', 'Alpha', 'Delta'])\n",
        'eeg_features.columns\n',
        "eeg_features.set_index(['Alpha', 'Delta'])\n",
        "duuu = eeg_features.set_index(['Alpha', 'Delta'])\n",
        'duuu\n',
        'duuu.unstack(1)\n',
        'duuu.unstack(1).columns\n',
        'eeg_features.unstack()\n',
        'shape(eeg_features.unstack())\n',
        'eeg_features.unstack().shape\n',
        'puppe = eeg_features.unstack()\n',
        'puppe[1]\n',
        'puppe[2]\n',
        'puppe[0]\n',
        'puppe\n',
        "eeg_features['idx'] = eeg_features.index\n",
        'eeg_features.pivot()\n',
        'eeg_features.pivot(columns = [eeg_features.columns, eeg_features.id'\
        'xmax])\n',
        'len(eeg_features.columns)\n',
        'def long_to_wide(df, index):\n    df = df.set_index(index).unstack('\
        ').reset_index()\n    cols = [t[1] if t[1] else t[0] for t in df.col'\
        'umns]\n    df.columns = cols\n    return df\n\n',
        'long_to_wide(eeg_features, [eeg_features.columns, eeg_features.idxm'\
        'ax])\n',
        'long_to_wide(eeg_features, [eeg_features.columns, eeg_features.idx]'\
        ')\n',
        'eeg_features\n',
        'features_df\n']},
                       'launch-id': None,
                       'sel-line': 919L,
                       'sel-line-start': 49305L,
                       'selection_end': 49305L,
                       'selection_start': 49305L,
                       'zoom': 0L}),
                     ('debug-watch',
                      'wide',
                      1,
                      {'node-states': [],
                       'tree-state': {'expanded-nodes': [],
                                      'selected-nodes': [],
                                      'top-node': (0,)}}),
                     ('debug-modules',
                      'wide',
                      1,
                      {}),
                     ('python-shell',
                      'wide',
                      2,
                      {'active-range': (None,
        -1,
        -1),
                       'attrib-starts': [],
                       'first-line': 2373L,
                       'folded-linenos': [],
                       'history': {None: ['tmp_df.columns + 1\n',
        "tmp_df.columns + str(tmp_df['idx'])\n",
        'tmp_df.columns + str(1)\n',
        'new_df = pd.DataFrame()\n',
        'temp_df = pd.DataFrame()\n',
        'temp_df.columns = tmp_df.columns + str(1)\n',
        'temp_df.assign( **tmp_df.columns + str(1))\n',
        'temp_df.assign( **tmp_df[0,:] + str(1))\n',
        'duh = data[0, :]\n',
        'duh = data.iloc[0, :]\n',
        'duh.shape\n',
        'duh.T\n',
        'duh.T.shape\n',
        'duh = data.loc[0, :]\n',
        'duh\n',
        'type(duh)\n',
        'duh = data.loc[[0, :]]\n',
        'data.loc[0, :]\n',
        'type(data.loc[0, :])\n',
        'type(data.iloc[[0], :])\n',
        'data.iloc[[0], :]\n',
        'tuh = data.iloc[[0], :]\n',
        'tuh.columns\n',
        'tuh.columns + str(1)\n',
        "new_df = pd.DataFrame()\ntemp_df = pd.DataFrame()\nfor i in tmp_df["\
        "'idx']:\n  \n    one_row_df = data.iloc[[0], :]\n    one_row_df.col"\
        "umns = one_row_df.columns + str(idx)\n    if i == 0:        \n     "\
        "   new_df = one_row_df.copy( ) \n    else:        \n        new_df "\
        "= pd.concat([new_df, one_row_df], axis= 1)\n    \n",
        "new_df = pd.DataFrame()\ntemp_df = pd.DataFrame()\nfor i in tmp_df["\
        "'idx']:\n  \n    one_row_df = data.iloc[[0], :]\n    one_row_df.col"\
        "umns = one_row_df.columns + str(i)\n    if i == 0:        \n       "\
        " new_df = one_row_df.copy( ) \n    else:        \n        new_df = "\
        "pd.concat([new_df, one_row_df], axis= 1)\n    \n",
        "tmp_df.drop('idx', inplace = True)\n",
        "tmp_df.drop(['idx'], inplace = True)\n",
        "tmp_df.drop(['idx'], axis = 1, inplace = True)\n",
        'tmp_df\n',
        'data = tmp_df.copy()\n',
        "for i in tmp_df['idx']:  \n    one_row_df = data.iloc[[0], :]\n    "\
        "one_row_df.columns = one_row_df.columns + str(i)\n    if i == 0:   "\
        "     \n        new_df2 = one_row_df.copy( ) \n    else:        \n  "\
        "      new_df2 = pd.concat([new_df, one_row_df], axis= 1)\n    \n",
        'for i in range(0, 8):  \n    one_row_df = data.iloc[[0], :]\n    on'\
        'e_row_df.columns = one_row_df.columns + str(i)\n    if i == 0:     '\
        '   \n        new_df2 = one_row_df.copy( ) \n    else:        \n    '\
        '    new_df2 = pd.concat([new_df, one_row_df], axis= 1)\n    \n',
        ' new_df2\n',
        'new_df2.columns\n',
        'del new_df2\n',
        '\nfor i in range(0, 8):  \n    one_row_df = data.iloc[[i], :]\n    '\
        'one_row_df.columns = one_row_df.columns + str(i)\n    if i == 0:   '\
        '     \n        new_df2 = one_row_df.copy( ) \n    else:        \n  '\
        '      new_df2 = pd.concat([new_df, one_row_df], axis= 1)\n    \n',
        'new_df2.shape\n',
        'new_df[0, :]\n',
        'new_df2[0, :]\n',
        'new_df2\n',
        'new_df2.iloc[0:0:6]\n',
        'new_df2.iloc[0, 0:6].shape\n',
        'data.head()\n',
        'data.iloc[0, 1:6]\n',
        'new_df2.iloc[0, 0:6]\n',
        'new_df2.iloc[1, 0:6]\n',
        '\nfor i in range(0, 8):  \n    one_row_df = data.iloc[[i], :]\n    '\
        'one_row_df.columns = one_row_df.columns + str(i)\n    if i == 0:   '\
        '     \n        new_df = one_row_df.copy( ) \n    else:        \n   '\
        '     new_df = pd.concat([new_df, one_row_df], axis= 1)\n    \n',
        '\nfor i in range(0, 8):  \n    one_row_df = data.iloc[[i], :]\n    '\
        'one_row_df.columns = one_row_df.columns + str(i)\n    if i == 0:   '\
        '     \n        new_df = one_row_df.copy( ) \n    else:        \n   '\
        '     new_df = pd.concat([new_df, one_row_df], axis= 0)\n    \n',
        'for i in range(0, 8):  \n    one_row_df = data.iloc[[i], :]\n    on'\
        'e_row_df.columns = one_row_df.columns + str(i)\n    if i == 0:     '\
        '   \n        new_df = one_row_df.copy( ) \n    else:        \n     '\
        '   new_df = pd.concat([new_df, one_row_df], axis= 1)\n    \n',
        'for i in range(0, 8):  \n    one_row_df = data.iloc[[i], :]\n    on'\
        'e_row_df.columns = one_row_df.columns + str(i)\n    if i == 0:     '\
        '   \n        new_df = one_row_df.copy( ) \n    else:        \n     '\
        '   new_df = pd.concat([new_df, one_row_df], ignore_index= True, axi'\
        's= 1)\n    \n',
        'del one_row_df\n',
        'i = 0\n',
        'one_row_df = data.iloc[[i], :]\n one_row_df.columns = one_row_df.co'\
        'lumns + str(i)\n',
        'one_row_df = data.iloc[[i], :]\n    one_row_df.columns = one_row_df'\
        '.columns + str(i)\n',
        'new_df = one_row_df.copy( )\n',
        'i = 1\n',
        'one_row_df = data.iloc[[i], :]\n',
        'one_row_df.columns = one_row_df.columns + str(i)\n',
        'one_row_d\n',
        'df1 = new_df.copy()\n',
        'df2 = one_row_df.copy()\n',
        'pd.concat(df1, df2)\n',
        'pd.concat([df1, df2])\n',
        'pd.concat([df1, df2], axis = 0)\n',
        'pd.join(df1, df2)\n',
        'df1.join(df2)\n',
        'df2\n',
        "df1.join(df2, df1, how = 'outer')\n",
        'df1 + df2\n',
        'df1\n',
        'pdf.concat([df1, df2], axis = 1)\n',
        'df1.assign(df2)\n',
        'pd.concat([df1, df2], axis = 1)\n',
        "pd.merge(right = df1, left = df2, how = 'outer')\n",
        "pd.merge( df1, df2, how = 'outer')\n",
        "pd.merge( df1, df2, how = 'outer', one_row_df = index)\n",
        "df1['marge'] = 1\n",
        "df2['marge'] = 1\n",
        "pd.merge( df1, df2, how = 'outer', on = 'marge')\n",
        "#  There don't seem to be ready made way to go from wide to long th"\
        "is way, so\n#  I suppose it have to do it manually.. there probably"\
        " is some much more elegant\n#  way to do it but what the heck, for "\
        "loop time!\n#  edit: this merge nonsense is ridiculous... is there "\
        "really no working way in pandas\n#  to concatenate columns..\nfor i"\
        " in range(0, 8):  \n    one_row_df = data.iloc[[i], :]\n    one_row"\
        "_df.columns = one_row_df.columns + str(i)\n    one_row_df['merger']"\
        " = 1\n    if i == 0:        \n        new_df = one_row_df.copy( ) "\
        "\n    else:\n        pd.merge( onw_row_df, new_df, how = 'outer', o"\
        "n = 'merger')\n    #    new_df = pd.concat([new_df, one_row_df], ig"\
        "nore_index= True, axis= 1)\n    \n",
        "\n#  There don't seem to be ready made way to go from wide to long "\
        "this way, so\n#  I suppose it have to do it manually.. there probab"\
        "ly is some much more elegant\n#  way to do it but what the heck, fo"\
        "r loop time!\n#  edit: this merge nonsense is ridiculous... is ther"\
        "e really no working way in pandas\n#  to concatenate columns..\nfor"\
        " i in range(0, 8):  \n    one_row_df = data.iloc[[i], :]\n    one_r"\
        "ow_df.columns = one_row_df.columns + str(i)\n    one_row_df['merger"\
        "'] = 1\n    if i == 0:        \n        new_df = one_row_df.copy( )"\
        " \n    else:\n        pd.merge( one_row_df, new_df, how = 'outer', "\
        "on = 'merger')\n    #    new_df = pd.concat([new_df, one_row_df], i"\
        "gnore_index= True, axis= 1)\n",
        "\n#  There don't seem to be ready made way to go from wide to long "\
        "this way, so\n#  I suppose it have to do it manually.. there probab"\
        "ly is some much more elegant\n#  way to do it but what the heck, fo"\
        "r loop time!\n#  edit: this merge nonsense is ridiculous... is ther"\
        "e really no working way in pandas\n#  to concatenate columns..\nfor"\
        " i in range(0, 8):  \n    one_row_df = data.iloc[[i], :]\n    one_r"\
        "ow_df.columns = one_row_df.columns + str(i)\n    one_row_df['merger"\
        "'] = 1\n    if i == 0:        \n        new_df = one_row_df.copy( )"\
        " \n    else:\n        new_df = pd.merge( one_row_df, new_df, how = "\
        "'outer', on = 'merger')\n    #    new_df = pd.concat([new_df, one_r"\
        "ow_df], ignore_index= True, axis= 1)\n    \n",
        '8 * 12\n',
        "new_df.drop('merger', inplace = True)\n",
        "new_df.drop('merger', inplace = True, axis = 1)\n",
        'new_df.shape\n',
        "def widen_features(df):\n    for i in range(0, 8):  \n        one_r"\
        "ow_df = df.iloc[[i], :]\n        one_row_df.columns = one_row_df.co"\
        "lumns + str(i)\n        one_row_df['merger'] = 1\n        if i == 0"\
        ":        \n            new_df = one_row_df.copy( ) \n        else:"\
        "\n            new_df = pd.merge( one_row_df, new_df, how = 'outer',"\
        " on = 'merger')\n        #    new_df = pd.concat([new_df, one_row_d"\
        "f], ignore_index= True, axis= 1)\n        new_df.drop('merger', inp"\
        "lace = True, axis = 1)\n        return new_df\n    \n",
        "\ndef widen_features(df):\n    for i in range(0, 8):  \n        one"\
        "_row_df = df.iloc[[i], :]\n        one_row_df.columns = one_row_df."\
        "columns + str(i)\n        one_row_df['merger'] = 1\n        if i =="\
        " 0:        \n            new_df = one_row_df.copy( ) \n        else"\
        ":\n            new_df = pd.merge( one_row_df, new_df, how = 'outer'"\
        ", on = 'merger')\n        #    new_df = pd.concat([new_df, one_row_"\
        "df], ignore_index= True, axis= 1)\n        new_df.drop('merger', in"\
        "place = True, axis = 1)\n        return new_df\n    \n",
        "\ndef widen_features(df):\n    for i in range(0, 8):  \n        one"\
        "_row_df = df.iloc[[i], :].copy()\n        one_row_df.columns = one_"\
        "row_df.columns + str(i)\n        one_row_df['merger'] = 1\n        "\
        "if i == 0:        \n            new_df = one_row_df.copy( ) \n     "\
        "   else:\n            new_df = pd.merge( one_row_df, new_df, how = "\
        "'outer', on = 'merger')\n        #    new_df = pd.concat([new_df, o"\
        "ne_row_df], ignore_index= True, axis= 1)\n        new_df.drop('merg"\
        "er', inplace = True, axis = 1)\n        return new_df\n    \n",
        'durt\n',
        'data\n',
        "def widen_features(df):\n    for i in range(0, 8):  \n        one_r"\
        "ow_df = df.iloc[[i], :].copy()\n        one_row_df.columns = one_ro"\
        "w_df.columns + str(i)\n        one_row_df['merger'] = 1\n        if"\
        " i == 0:        \n            new_df = one_row_df.copy( ) \n       "\
        " else:\n            new_df = pd.merge( one_row_df, new_df, how = 'o"\
        "uter', on = 'merger')\n        #    new_df = pd.concat([new_df, one"\
        "_row_df], ignore_index= True, axis= 1)\n        new_df.drop('merger"\
        "', inplace = True, axis = 1)\n        \n    return new_df\n    \n",
        'durt = widen_features(data)\n',
        "data.to_pickle('eeg_features.pkl')\n",
        'one_row_df\n',
        'new_df\n',
        'del new_df\n',
        "import pandas as pd\nimport numpy as np\n\n\ndef widen_features(df)"\
        ":\n    for i in range(0, 8):  \n        one_row_df = df.iloc[[i], :"\
        "].copy()\n        one_row_df.columns = one_row_df.columns + str(i)"\
        "\n        one_row_df['merger'] = 1\n        if i == 0:        \n   "\
        "         new_df = one_row_df.copy( ) \n        else:\n            n"\
        "ew_df = pd.merge( one_row_df, new_df, how = 'outer', on = 'merger')"\
        "\n        #    new_df = pd.concat([new_df, one_row_df], ignore_inde"\
        "x= True, axis= 1)\n        \n    new_df.drop('merger', inplace = Tr"\
        "ue, axis = 1)\n        \n    return new_df\n\ndata = pd.read_pickle"\
        "(\"eeg_features.pkl\")\njee = widen_features(data)\n",
        'jee\n']},
                       'launch-id': None,
                       'sel-line': 2384L,
                       'sel-line-start': 117073L,
                       'selection_end': 117073L,
                       'selection_start': 117073L,
                       'zoom': 0L}),
                     ('bookmarks',
                      'wide',
                      1,
                      {}),
                     ('messages',
                      'wide',
                      2,
                      {'current-domain': 0}),
                     ('os-command',
                      'wide',
                      1,
                      {'last-percent': 0.8,
                       'toolbox-percent': 1.0,
                       'toolbox-tree-sel': 'cmd-t243o40ayMK8zxfc'})],
        'primary_view_state': {'editor_states': ({'bookmarks': ([[loc('fiddling_script.py'),
        {'attrib-starts': [],
         'first-line': 0L,
         'folded-linenos': [],
         'sel-line': 4L,
         'sel-line-start': 103L,
         'selection_end': 103L,
         'selection_start': 103L,
         'zoom': 0L},
        1564404306.862],
        [loc('test.py'),
         {'attrib-starts': [],
          'first-line': 0L,
          'folded-linenos': [],
          'sel-line': 0L,
          'sel-line-start': 0L,
          'selection_end': 650L,
          'selection_start': 0L,
          'zoom': 0L},
         1564404358.282],
        [loc('EEG_analyzer.py'),
         {'attrib-starts': [('Analyze_EEG',
                             6)],
          'first-line': 36L,
          'folded-linenos': [],
          'sel-line': 65L,
          'sel-line-start': 2508L,
          'selection_end': 2508L,
          'selection_start': 2508L,
          'zoom': 0L},
         1564404359.681],
        [loc('fiddling_script.py'),
         {'attrib-starts': [],
          'first-line': 0L,
          'folded-linenos': [],
          'sel-line': 4L,
          'sel-line-start': 103L,
          'selection_end': 103L,
          'selection_start': 103L,
          'zoom': 0L},
         1564404360.718],
        [loc('../../Anaconda3/envs/ml/Lib/site-packages/pandas/core/generic.py'),
         {'attrib-starts': [('NDFrame',
                             101),
                            ('NDFrame._get_label_or_level_values',
                             1329)],
          'first-line': 1376L,
          'folded-linenos': [],
          'sel-line': 1381L,
          'sel-line-start': 44785L,
          'selection_end': 44785L,
          'selection_start': 44785L,
          'zoom': 2L},
         1564404362.934],
        [loc('fiddling_script.py'),
         {'attrib-starts': [],
          'first-line': 177L,
          'folded-linenos': [],
          'sel-line': 181L,
          'sel-line-start': 5899L,
          'selection_end': 5899L,
          'selection_start': 5899L,
          'zoom': 0L},
         1564404372.907],
        [loc('EEG_analyzer.py'),
         {'attrib-starts': [],
          'first-line': 0L,
          'folded-linenos': [],
          'sel-line': 5L,
          'sel-line-start': 97L,
          'selection_end': 101L,
          'selection_start': 101L,
          'zoom': 0L},
         1564404380.765],
        [loc('fiddling_script.py'),
         {'attrib-starts': [],
          'first-line': 162L,
          'folded-linenos': [],
          'sel-line': 165L,
          'sel-line-start': 5137L,
          'selection_end': 5137L,
          'selection_start': 5137L,
          'zoom': 0L},
         1564404385.137],
        [loc('EEG_analyzer.py'),
         {'attrib-starts': [],
          'first-line': 3L,
          'folded-linenos': [],
          'sel-line': 5L,
          'sel-line-start': 97L,
          'selection_end': 97L,
          'selection_start': 97L,
          'zoom': 0L},
         1564404410.152],
        [loc('analysis_script.py'),
         {'attrib-starts': [('parse_user',
                             53)],
          'first-line': 128L,
          'folded-linenos': [],
          'sel-line': 142L,
          'sel-line-start': 6557L,
          'selection_end': 6621L,
          'selection_start': 6621L,
          'zoom': 4L},
         1564404533.551],
        [loc('test.py'),
         {'attrib-starts': [],
          'first-line': 0L,
          'folded-linenos': [],
          'sel-line': 1L,
          'sel-line-start': 2L,
          'selection_end': 2L,
          'selection_start': 2L,
          'zoom': 0L},
         1564404541.732],
        [loc('analysis_script.py'),
         {'attrib-starts': [('parse_user',
                             53)],
          'first-line': 106L,
          'folded-linenos': [],
          'sel-line': 111L,
          'sel-line-start': 4869L,
          'selection_end': 4869L,
          'selection_start': 4869L,
          'zoom': 4L},
         1564404832.019],
        [loc('EEG_analyzer.py'),
         {'attrib-starts': [],
          'first-line': 3L,
          'folded-linenos': [],
          'sel-line': 5L,
          'sel-line-start': 97L,
          'selection_end': 97L,
          'selection_start': 97L,
          'zoom': 0L},
         1564404833.101],
        [loc('analysis_script.py'),
         {'attrib-starts': [('parse_user',
                             53)],
          'first-line': 118L,
          'folded-linenos': [],
          'sel-line': 131L,
          'sel-line-start': 5955L,
          'selection_end': 5967L,
          'selection_start': 5967L,
          'zoom': 4L},
         1564404965.455],
        [loc('fiddling_script.py'),
         {'attrib-starts': [('widen_features',
                             182)],
          'first-line': 180L,
          'folded-linenos': [],
          'sel-line': 190L,
          'sel-line-start': 6168L,
          'selection_end': 6180L,
          'selection_start': 6180L,
          'zoom': 0L},
         1564404972.157],
        [loc('analysis_script.py'),
         {'attrib-starts': [('parse_user',
                             53)],
          'first-line': 129L,
          'folded-linenos': [],
          'sel-line': 132L,
          'sel-line-start': 5964L,
          'selection_end': 5964L,
          'selection_start': 5964L,
          'zoom': 4L},
         1564405256.46],
        [loc('../../Anaconda3/envs/ml/Lib/site-packages/pandas/core/generic.py'),
         {'attrib-starts': [('NDFrame',
                             101),
                            ('NDFrame._get_label_or_level_values',
                             1329)],
          'first-line': 1376L,
          'folded-linenos': [],
          'sel-line': 1381L,
          'sel-line-start': 44785L,
          'selection_end': 44785L,
          'selection_start': 44785L,
          'zoom': 2L},
         1564405263.016],
        [loc('fiddling_script.py'),
         {'attrib-starts': [('widen_features',
                             182)],
          'first-line': 180L,
          'folded-linenos': [],
          'sel-line': 190L,
          'sel-line-start': 6168L,
          'selection_end': 6180L,
          'selection_start': 6180L,
          'zoom': 0L},
         1564405264.32],
        [loc('analysis_script.py'),
         {'attrib-starts': [('parse_user',
                             53)],
          'first-line': 122L,
          'folded-linenos': [],
          'sel-line': 132L,
          'sel-line-start': 5964L,
          'selection_end': 5964L,
          'selection_start': 5964L,
          'zoom': 4L},
         1564405504.809],
        [loc('../../Anaconda3/envs/ml/Lib/site-packages/pandas/core/generic.py'),
         {'attrib-starts': [('NDFrame',
                             101),
                            ('NDFrame._get_label_or_level_values',
                             1329)],
          'first-line': 1364L,
          'folded-linenos': [],
          'sel-line': 1381L,
          'sel-line-start': 44785L,
          'selection_end': 44785L,
          'selection_start': 44785L,
          'zoom': 2L},
         1564405508.391]],
        20),
        'current-loc': loc('analysis_script.py'),
        'editor-state-list': [(loc('analysis_script.py'),
                               {'attrib-starts': [('parse_user',
        53)],
                                'first-line': 130L,
                                'folded-linenos': [],
                                'sel-line': 141L,
                                'sel-line-start': 6487L,
                                'selection_end': 6571L,
                                'selection_start': 6571L,
                                'zoom': 4L}),
                              (loc('EEG_analyzer.py'),
                               {'attrib-starts': [],
                                'first-line': 3L,
                                'folded-linenos': [],
                                'sel-line': 5L,
                                'sel-line-start': 97L,
                                'selection_end': 97L,
                                'selection_start': 97L,
                                'zoom': 0L}),
                              (loc('fiddling_script.py'),
                               {'attrib-starts': [('widen_features',
        182)],
                                'first-line': 180L,
                                'folded-linenos': [],
                                'sel-line': 190L,
                                'sel-line-start': 6168L,
                                'selection_end': 6180L,
                                'selection_start': 6180L,
                                'zoom': 0L}),
                              (loc('../../Anaconda3/envs/ml/Lib/site-packages/pandas/core/generic.py'),
                               {'attrib-starts': [('NDFrame',
        101),
        ('NDFrame._get_label_or_level_values',
         1329)],
                                'first-line': 1364L,
                                'folded-linenos': [],
                                'sel-line': 1381L,
                                'sel-line-start': 44785L,
                                'selection_end': 44785L,
                                'selection_start': 44785L,
                                'zoom': 2L})],
        'has-focus': True,
        'locked': False},
        [loc('analysis_script.py'),
         loc('EEG_analyzer.py'),
         loc('fiddling_script.py'),
         loc('../../Anaconda3/envs/ml/Lib/site-packages/pandas/core/generic.py')]),
                               'open_files': [u'EEG_analyzer.py',
        u'fiddling_script.py',
        u'analysis_script.py']},
        'saved_notebook_display': None,
        'split_percents': {0: 0.3863060016906171},
        'splits': 2,
        'tab_location': 'top',
        'user_data': {}},
                 'saved_notebook_display': None,
                 'split_percents': {0: 0.5},
                 'splits': 2,
                 'tab_location': 'left',
                 'user_data': {}},
        'window-alloc': (0,
                         -1,
                         3830,
                         2089)}]}
guimgr.recent-documents = [loc('analysis_script.py'),
                           loc('../../Anaconda3/envs/ml/Lib/site-packages/pandas/core/generic.py'),
                           loc('fiddling_script.py'),
                           loc('EEG_analyzer.py')]
guimgr.visual-state = {loc('../../Anaconda3/Lib/site-packages/pandas/core/generic.py'): {'a'\
        'ttrib-starts': [('NDFrame',
                          100),
                         ('NDFrame._get_item_cache',
                          2480)],
        'first-line': 2478L,
        'folded-linenos': [],
        'sel-line': 2483L,
        'sel-line-start': 87781L,
        'selection_end': 87781L,
        'selection_start': 87781L,
        'zoom': 0L},
                       loc('../../Anaconda3/Lib/site-packages/scipy/io/matlab/mio.py'): {'a'\
        'ttrib-starts': [('mat_reader_factory',
                          43)],
        'first-line': 6L,
        'folded-linenos': [],
        'sel-line': 70L,
        'sel-line-start': 2055L,
        'selection_end': 2055L,
        'selection_start': 2055L,
        'zoom': 0L},
                       loc('../../Anaconda3/envs/ml/Lib/site-packages/mne/io/pick.py'): {'a'\
        'ttrib-starts': [('_picks_to_idx',
                          887)],
        'first-line': 885L,
        'folded-linenos': [],
        'sel-line': 890L,
        'sel-line-start': 31631L,
        'selection_end': 31631L,
        'selection_start': 31631L,
        'zoom': 0L},
                       loc('../../Anaconda3/envs/ml/Lib/site-packages/numpy/core/_methods.py'): {'a'\
        'ttrib-starts': [('_count_reduce_items',
                          47)],
        'first-line': 32L,
        'folded-linenos': [],
        'sel-line': 54L,
        'sel-line-start': 1715L,
        'selection_end': 1715L,
        'selection_start': 1715L,
        'zoom': 0L},
                       loc('../../Anaconda3/envs/ml/Lib/site-packages/pandas/core/generic.py'): {'a'\
        'ttrib-starts': [('NDFrame',
                          101),
                         ('NDFrame._get_item_cache',
                          2483)],
        'first-line': 2481L,
        'folded-linenos': [],
        'sel-line': 2486L,
        'sel-line-start': 85405L,
        'selection_end': 85405L,
        'selection_start': 85405L,
        'zoom': 2L},
                       loc('../../Anaconda3/envs/ml/Lib/site-packages/pandas/core/indexes/base.py'): {'a'\
        'ttrib-starts': [('Index',
                          182),
                         ('Index.__hash__',
                          2060)],
        'first-line': 2056L,
        'folded-linenos': [],
        'sel-line': 2061L,
        'sel-line-start': 69200L,
        'selection_end': 69200L,
        'selection_start': 69200L,
        'zoom': 0L},
                       loc('../../Anaconda3/envs/ml/Lib/site-packages/pandas/core/indexing.py'): {'a'\
        'ttrib-starts': [('_NDFrameIndexer',
                          87),
                         ('_NDFrameIndexer._convert_to_indexer',
                          1224)],
        'first-line': 1307L,
        'folded-linenos': [],
        'sel-line': 1326L,
        'sel-line-start': 48427L,
        'selection_end': 48427L,
        'selection_start': 48427L,
        'zoom': 0L},
                       loc('../../Anaconda3/envs/ml/Lib/site-packages/pandas/core/internals.py'): {'a'\
        'ttrib-starts': [('BlockManager',
                          3209),
                         ('BlockManager.set',
                          4207)],
        'first-line': 4223L,
        'folded-linenos': [],
        'sel-line': 4238L,
        'sel-line-start': 144917L,
        'selection_end': 144917L,
        'selection_start': 144917L,
        'zoom': 0L},
                       loc('../../Anaconda3/envs/ml/lib/pickle.py'): {'attri'\
        'b-starts': [('_Unpickler',
                      985),
                     ('_Unpickler.find_class',
                      1380)],
        'first-line': 1363L,
        'folded-linenos': [],
        'sel-line': 1387L,
        'sel-line-start': 49446L,
        'selection_end': 49446L,
        'selection_start': 49446L,
        'zoom': 0L},
                       loc('../../Anaconda3/envs/ml/lib/site-packages/matplotlib/axes/_base.py'): {'a'\
        'ttrib-starts': [('_process_plot_var_args',
                          142),
                         ('_process_plot_var_args._xy_from_xy',
                          212)],
        'first-line': 217L,
        'folded-linenos': [],
        'sel-line': 241L,
        'sel-line-start': 8035L,
        'selection_end': 8035L,
        'selection_start': 8035L,
        'zoom': 0L},
                       loc('../../Anaconda3/envs/ml/lib/site-packages/pandas/core/apply.py'): {'a'\
        'ttrib-starts': [('FrameApply',
                          31),
                         ('FrameApply.apply_series_generator',
                          252)],
        'first-line': 249L,
        'folded-linenos': [],
        'sel-line': 276L,
        'sel-line-start': 9078L,
        'selection_end': 9078L,
        'selection_start': 9078L,
        'zoom': 0L},
                       loc('../../Anaconda3/envs/ml/lib/site-packages/pandas/core/tools/datetimes.py'): {'a'\
        'ttrib-starts': [('to_time',
                          652),
                         ('to_time._convert_listlike',
                          681)],
        'first-line': 709L,
        'folded-linenos': [],
        'sel-line': 732L,
        'sel-line-start': 25983L,
        'selection_end': 25983L,
        'selection_start': 25983L,
        'zoom': 0L},
                       loc('../../Anaconda3/envs/ml/lib/site-packages/scipy/signal/filter_design.py'): {'a'\
        'ttrib-starts': [('iirfilter',
                          1851)],
        'first-line': 1973L,
        'folded-linenos': [],
        'sel-line': 1986L,
        'sel-line-start': 65485L,
        'selection_end': 65485L,
        'selection_start': 65485L,
        'zoom': 0L},
                       loc('ECG_analyser.py'): {'attrib-starts': [],
        'first-line': 0L,
        'folded-linenos': [],
        'sel-line': 7L,
        'sel-line-start': 218L,
        'selection_end': 218L,
        'selection_start': 218L,
        'zoom': 0L},
                       loc('EEG_parser.py'): {'attrib-starts': [('parse_matl'\
        'ab_file',
        10)],
        'first-line': 0L,
        'folded-linenos': [],
        'sel-line': 11L,
        'sel-line-start': 364L,
        'selection_end': 404L,
        'selection_start': 404L,
        'zoom': 0L},
                       loc('README.md'): {'attrib-starts': [],
        'first-line': 0L,
        'folded-linenos': [],
        'sel-line': 9L,
        'sel-line-start': 335L,
        'selection_end': 390L,
        'selection_start': 390L,
        'zoom': 0L},
                       loc('analysis_script.py'): {'attrib-starts': [],
        'first-line': 0L,
        'folded-linenos': [],
        'sel-line': 174L,
        'sel-line-start': 8060L,
        'selection_end': 8089L,
        'selection_start': 8089L,
        'zoom': 4L},
                       loc('arduino_parser.py'): {'attrib-starts': [],
        'first-line': 0L,
        'folded-linenos': [],
        'sel-line': 3L,
        'sel-line-start': 34L,
        'selection_end': 72L,
        'selection_start': 72L,
        'zoom': 0L},
                       loc('bitalino_parser.py'): {'attrib-starts': [('parse'\
        '_bitalino_directory',
        10)],
        'first-line': 0L,
        'folded-linenos': [],
        'sel-line': 21L,
        'sel-line-start': 800L,
        'selection_end': 866L,
        'selection_start': 866L,
        'zoom': 0L},
                       loc('fiddling_script.py'): {'attrib-starts': [],
        'first-line': 106L,
        'folded-linenos': [],
        'sel-line': 118L,
        'sel-line-start': 3526L,
        'selection_end': 3582L,
        'selection_start': 3582L,
        'zoom': 0L},
                       loc('opensignals_reader.py'): {'attrib-starts': [('Op'\
        'enSignalsFileReader',
        20)],
        'first-line': 42L,
        'folded-linenos': [],
        'sel-line': 66L,
        'sel-line-start': 1245L,
        'selection_end': 1245L,
        'selection_start': 1245L,
        'zoom': 0L},
                       loc('test.py'): {'attrib-starts': [],
        'first-line': 0L,
        'folded-linenos': [],
        'sel-line': 1L,
        'sel-line-start': 2L,
        'selection_end': 2L,
        'selection_start': 2L,
        'zoom': 0L},
                       loc('../python-opensignals-file-reader/opensignalsfilereader.py'): {'a'\
        'ttrib-starts': [],
        'first-line': 50L,
        'folded-linenos': [],
        'sel-line': 64L,
        'sel-line-start': 1159L,
        'selection_end': 1448L,
        'selection_start': 1159L,
        'zoom': 0L}}
proj.pyexec = {None: ('custom',
                      u'c:\\Users\\ilkka\\Anaconda3\\envs\\ml\\python.exe')}
search.replace-history = [u'psychopy_data']
search.search-history = [u'psyd',
                         u't',
                         u'muf']
testing.stored-results = (1,
                          [],
                          {})
versioncontrol.git.remote-history = ['git@github.com:BasalGanglia/booth_anal'\
                                     'ysis.git']
